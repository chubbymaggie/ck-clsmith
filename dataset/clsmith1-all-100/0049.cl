// --atomics 89 ---atomic_reductions ---fake_divergence ---inter_thread_comm -g 5,86,1 -l 5,43,1
#define int64_t long
#define uint64_t ulong
#define int_least64_t long
#define uint_least64_t ulong
#define int_fast64_t long
#define uint_fast64_t ulong
#define intmax_t long
#define uintmax_t ulong
#define int32_t int
#define uint32_t uint
#define int16_t short
#define uint16_t ushort
#define int8_t char
#define uint8_t uchar

#define INT64_MIN LONG_MIN
#define INT64_MAX LONG_MAX
#define INT32_MIN INT_MIN
#define INT32_MAX INT_MAX
#define INT16_MIN SHRT_MIN
#define INT16_MAX SHRT_MAX
#define INT8_MIN CHAR_MIN
#define INT8_MAX CHAR_MAX
#define UINT64_MIN ULONG_MIN
#define UINT64_MAX ULONG_MAX
#define UINT32_MIN UINT_MIN
#define UINT32_MAX UINT_MAX
#define UINT16_MIN USHRT_MIN
#define UINT16_MAX USHRT_MAX
#define UINT8_MIN UCHAR_MIN
#define UINT8_MAX UCHAR_MAX

#define transparent_crc(X, Y, Z) transparent_crc_(&crc64_context, X, Y, Z)

#define VECTOR(X , Y) VECTOR_(X, Y)
#define VECTOR_(X, Y) X##Y

#ifndef NO_GROUP_DIVERGENCE
#define GROUP_DIVERGE(x, y) get_group_id(x)
#else
#define GROUP_DIVERGE(x, y) (y)
#endif

#ifndef NO_FAKE_DIVERGENCE
#define FAKE_DIVERGE(x, y, z) (x - y)
#else
#define FAKE_DIVERGE(x, y, z) (z)
#endif

__constant uint32_t permutations[10][215] = {
{113,199,167,36,33,11,62,131,130,195,7,169,79,105,137,109,32,93,78,160,34,52,208,39,58,38,76,23,148,67,51,73,94,43,55,22,48,57,126,31,66,37,189,83,59,138,4,197,170,46,53,140,188,65,75,27,60,17,209,68,26,114,190,194,119,15,110,191,96,8,214,151,95,166,150,125,127,106,132,181,107,25,121,1,63,193,77,0,92,99,49,112,97,142,186,54,115,88,192,111,204,202,102,179,162,85,198,117,118,12,10,163,42,103,147,212,69,64,21,40,153,35,143,6,3,174,19,175,56,139,144,50,165,123,86,184,82,141,18,5,200,13,108,161,183,72,180,74,159,172,89,30,157,20,196,203,122,14,71,213,185,116,176,80,24,145,120,47,205,70,61,41,136,211,173,16,101,91,45,90,177,2,9,29,201,182,28,187,146,149,133,171,154,164,155,81,84,158,44,156,210,98,128,178,152,135,206,168,124,207,100,129,134,104,87}, // permutation 0
{153,193,97,43,172,134,212,17,199,188,2,206,131,37,174,150,158,163,47,116,173,19,122,197,16,99,187,21,95,209,161,147,28,96,160,62,86,10,171,72,141,9,30,137,157,44,63,7,68,38,49,112,98,59,27,176,179,65,111,109,32,154,0,4,113,60,139,135,35,169,194,211,88,159,208,167,23,80,54,90,152,67,149,82,14,202,214,181,185,201,48,183,81,186,58,71,142,196,138,85,118,129,64,121,29,5,78,20,101,94,124,22,6,56,34,92,210,184,45,51,89,33,57,103,146,87,31,143,26,77,104,125,207,40,170,180,156,175,46,70,205,177,189,126,114,136,25,166,148,123,50,198,192,190,42,15,110,132,119,24,178,155,144,18,128,182,115,84,195,200,76,127,168,145,75,106,105,1,191,73,36,133,203,140,74,66,3,79,93,204,117,39,41,102,162,120,69,151,165,83,11,61,52,91,13,164,213,130,108,107,100,12,8,55,53}, // permutation 1
{37,138,102,87,82,113,79,192,195,75,35,202,106,42,4,205,152,62,207,121,19,129,92,130,193,36,47,159,32,214,183,9,18,10,146,29,201,140,141,187,115,7,22,78,77,168,46,166,167,16,132,44,39,28,88,128,133,200,124,6,51,11,80,67,45,5,65,212,198,151,181,55,86,206,98,52,40,182,25,142,194,76,26,147,114,54,204,57,41,14,69,144,110,34,17,150,30,109,95,97,117,203,176,127,13,173,126,156,94,49,131,23,136,71,60,185,125,27,177,137,180,139,123,8,104,31,111,81,84,163,161,108,91,148,210,100,63,101,85,162,154,73,208,135,134,190,48,213,33,120,157,145,12,38,112,178,58,149,59,175,3,103,21,107,20,197,66,122,116,64,90,155,188,72,56,105,119,189,174,43,211,160,96,70,196,68,164,50,2,93,99,24,74,15,169,118,61,89,1,172,186,153,53,209,158,199,179,143,83,191,170,0,184,165,171}, // permutation 2
{146,104,198,30,67,206,47,116,90,78,103,74,208,181,13,5,3,31,17,123,81,156,23,79,134,169,213,83,106,197,70,46,147,100,128,66,108,65,9,203,131,151,113,22,21,180,69,211,86,118,212,28,58,152,190,62,164,25,184,32,20,94,112,115,11,129,124,109,137,148,96,157,95,43,126,6,40,210,114,8,141,29,133,15,71,101,16,130,159,24,54,99,85,143,0,44,166,171,37,132,14,1,84,56,140,12,174,98,119,185,163,150,183,88,7,39,77,178,33,19,160,49,202,204,167,192,107,51,209,122,127,57,188,73,175,125,76,187,161,179,36,27,139,170,38,110,155,4,194,120,138,145,201,87,158,82,111,142,80,60,42,105,182,173,10,205,26,165,214,48,172,117,136,177,75,135,18,176,149,35,102,191,186,168,52,64,50,55,162,196,34,92,199,68,2,121,63,89,153,53,195,72,97,93,189,193,41,59,61,154,144,45,91,207,200}, // permutation 3
{212,145,194,81,184,49,53,175,27,19,108,39,160,162,43,28,23,148,134,146,67,129,102,136,56,2,85,37,172,89,114,182,178,59,48,35,5,211,61,123,86,144,153,120,72,94,20,197,113,125,200,124,116,14,68,79,41,189,98,119,84,91,181,185,74,110,156,135,60,54,152,161,201,36,87,31,1,167,82,75,29,92,165,168,70,190,149,40,55,150,93,195,24,126,157,18,97,21,66,13,118,11,3,115,16,128,100,104,204,15,171,154,199,203,164,76,32,214,176,12,213,206,133,80,208,42,137,90,47,132,64,62,88,121,6,107,155,207,0,179,174,163,99,71,183,209,188,147,105,38,109,138,127,44,57,158,143,205,30,96,140,139,50,33,69,106,193,51,17,10,111,45,159,180,196,202,52,78,169,131,26,7,192,95,22,198,34,142,65,191,130,25,170,63,77,166,8,173,46,83,112,177,186,210,101,122,117,9,4,58,73,187,141,151,103}, // permutation 4
{95,52,61,212,177,208,139,9,161,85,114,126,175,31,120,198,45,77,172,50,197,108,111,113,35,97,48,143,5,171,180,163,213,188,107,205,151,189,103,24,80,14,62,91,13,17,25,11,146,78,118,81,41,26,40,211,190,20,169,51,16,203,63,201,128,145,86,155,36,76,122,53,34,185,96,15,140,162,79,119,12,121,56,204,164,75,193,147,131,195,67,59,39,46,170,150,148,101,99,10,66,112,192,210,84,64,184,165,2,133,93,27,152,92,105,29,38,179,90,33,202,199,186,94,132,129,116,83,18,54,158,191,57,87,8,196,109,127,187,43,182,149,23,19,153,135,73,160,74,207,28,104,0,106,55,142,167,166,110,214,47,6,70,157,125,1,49,71,72,141,21,102,138,4,89,183,32,123,130,200,65,124,3,37,134,22,156,100,69,159,209,136,194,7,174,44,42,168,154,173,60,58,30,144,206,82,68,178,98,115,88,117,181,137,176}, // permutation 5
{178,153,75,68,16,97,17,160,7,165,84,36,124,134,2,149,200,184,31,122,50,94,72,65,37,12,115,213,14,173,44,27,188,58,51,156,42,56,41,78,136,96,135,121,53,62,158,0,63,116,70,154,103,199,100,101,98,76,45,161,71,198,55,159,183,195,73,4,162,202,167,82,145,30,182,128,87,38,170,148,119,54,211,114,146,64,40,59,140,176,172,137,174,214,139,92,113,117,212,179,152,132,33,112,60,118,5,150,46,89,105,34,24,13,189,81,10,6,80,194,52,207,177,8,21,90,83,49,186,111,69,175,126,181,164,108,180,192,187,208,210,66,93,143,43,209,141,163,22,57,79,206,28,193,147,95,127,197,9,185,11,203,106,144,91,74,204,191,151,19,47,110,99,1,3,131,102,29,196,61,166,125,120,18,35,201,88,138,130,109,48,86,25,20,26,157,15,205,171,67,85,39,77,104,155,142,133,168,107,129,169,23,190,123,32}, // permutation 6
{211,35,44,19,25,21,138,148,175,149,20,134,90,83,158,127,113,95,195,66,23,152,163,145,24,11,22,42,97,118,50,139,67,150,70,51,172,6,194,49,7,78,214,144,143,120,110,191,102,210,9,107,53,121,36,54,10,186,32,38,161,2,105,91,26,13,115,71,39,147,31,153,188,98,5,207,63,45,96,106,85,179,156,197,62,167,119,142,181,151,99,206,81,184,169,176,132,133,72,55,187,27,126,16,199,18,73,205,108,88,192,198,12,201,75,166,3,8,162,34,170,4,204,82,17,136,28,47,94,77,92,46,200,160,183,174,114,101,209,41,154,15,129,64,0,173,37,1,182,123,76,112,141,58,135,178,57,87,208,69,157,125,56,164,185,130,52,165,177,30,212,48,109,74,29,159,116,86,103,89,40,43,168,190,79,180,111,117,122,100,137,196,203,193,128,155,93,146,59,33,124,80,65,60,131,213,68,202,171,140,104,189,61,14,84}, // permutation 7
{41,167,70,22,166,171,131,104,143,189,147,155,2,8,136,100,144,23,128,31,56,180,173,206,204,68,179,198,186,176,126,145,177,91,125,185,134,199,88,42,77,159,181,164,200,174,61,62,107,90,75,194,142,74,52,96,158,93,156,46,99,119,57,30,207,86,210,146,138,109,188,4,124,43,59,135,201,13,120,192,53,202,101,39,36,34,172,193,170,45,83,113,139,168,76,40,141,151,32,19,27,49,38,195,6,67,149,21,98,197,20,137,163,203,116,29,212,37,48,87,123,17,169,187,196,117,97,121,103,211,0,95,15,12,157,66,24,9,72,33,148,81,63,7,55,161,92,50,105,191,3,184,122,152,205,10,94,132,102,11,1,60,18,175,80,47,133,85,129,14,44,28,111,73,108,71,110,154,150,114,82,51,69,190,58,16,89,214,153,183,182,65,208,25,209,115,213,160,54,35,118,84,162,79,26,5,106,178,140,112,127,130,78,165,64}, // permutation 8
{66,186,160,207,173,157,47,93,29,201,184,206,141,204,88,165,48,104,192,123,82,132,202,198,10,138,179,95,129,56,116,107,120,143,36,72,13,106,108,110,86,98,57,54,59,205,113,91,50,32,4,124,146,53,190,31,135,109,166,73,154,114,24,3,164,14,140,111,40,80,49,90,203,20,152,6,211,28,144,9,38,105,127,96,5,33,51,75,145,115,159,168,83,70,58,16,99,69,194,189,121,137,44,122,7,8,76,171,185,43,21,197,178,118,134,150,130,169,148,94,187,156,79,81,117,193,170,151,23,172,55,35,147,175,188,155,167,183,177,92,45,191,200,97,52,126,196,39,85,68,37,11,27,78,71,213,18,125,102,89,22,30,63,149,67,139,61,103,176,64,199,133,214,74,60,100,158,84,174,17,42,87,101,41,77,195,25,128,182,65,131,153,180,162,163,119,46,212,34,15,62,12,19,161,208,181,112,210,26,2,136,1,209,142,0} // permutation 9
};

// Seed: 49

#include "CLSmith.h"

/* --- Struct/Union Declarations --- */
struct S0 {
   uint64_t  f0;
   uint64_t  f1;
   uint16_t  f2;
   volatile int32_t  f3;
   uint32_t  f4;
   uint8_t  f5;
   uint32_t  f6;
   int64_t  f7;
   int32_t  f8;
   uint32_t  f9;
};

struct S1 {
   volatile uint32_t  f0;
   int32_t  f1;
   volatile uint16_t  f2;
   uint8_t  f3;
   uint64_t  f4;
   volatile int32_t  f5;
};

struct S2 {
    int32_t g_2;
    VECTOR(int64_t, 4) g_18;
    int16_t g_30;
    VECTOR(int16_t, 16) g_38;
    int64_t g_50;
    volatile struct S0 g_57;
    uint8_t g_82;
    int16_t g_91;
    uint16_t g_99;
    struct S1 g_108;
    int64_t g_118[2];
    struct S0 g_122;
    struct S0 g_123[9];
    struct S0 g_124;
    struct S0 g_125;
    struct S0 g_126[8][4];
    struct S0 g_127;
    struct S0 *g_121[3][8];
    struct S0 g_129[5][2];
    volatile struct S1 g_131;
    volatile struct S1 g_132;
    struct S0 *g_139;
    int32_t g_157;
    int32_t *g_193;
    int32_t ** volatile g_192;
    int8_t g_299;
    volatile uint16_t g_300;
    volatile uint32_t g_313;
    volatile int16_t g_329;
    volatile uint64_t g_330;
    VECTOR(int16_t, 2) g_333;
    volatile VECTOR(int8_t, 2) g_335;
    struct S0 g_349[6][6];
    struct S0 **g_355[7][4];
    uint32_t g_365;
    int64_t *g_370;
    struct S1 g_371[10];
    struct S1 g_396[10];
    int32_t * volatile g_406;
    volatile int64_t *g_469;
    volatile int64_t * volatile *g_468;
    volatile int64_t * volatile * volatile * volatile g_467;
    int32_t ** volatile g_510;
    volatile VECTOR(uint8_t, 2) g_513;
    VECTOR(int8_t, 2) g_526;
    uint16_t g_529;
    VECTOR(int32_t, 8) g_534;
    volatile VECTOR(int16_t, 16) g_546;
    volatile VECTOR(uint32_t, 8) g_559;
    struct S1 g_585[4];
    struct S0 g_598;
    volatile struct S0 g_613;
    volatile struct S0 g_626;
    volatile struct S0 g_627;
    struct S0 g_630;
    struct S0 g_631[1];
    VECTOR(int32_t, 4) g_639;
    int8_t *g_647;
    struct S0 g_650;
    struct S0 g_651;
    struct S0 g_652;
    int16_t g_653[6];
    volatile VECTOR(int32_t, 8) g_657;
    volatile VECTOR(uint16_t, 16) g_675;
    VECTOR(uint32_t, 8) g_678;
    uint32_t v_collective;
    uint64_t global_0_offset;
    uint64_t global_1_offset;
    uint64_t global_2_offset;
    uint64_t local_0_offset;
    uint64_t local_1_offset;
    uint64_t local_2_offset;
    uint64_t group_0_offset;
    uint64_t group_1_offset;
    uint64_t group_2_offset;
    uint32_t tid;
    __global volatile uint32_t *g_atomic_input;
    __global volatile uint32_t *g_special_values;
    __local volatile uint32_t *l_atomic_reduction;
    __global volatile uint32_t *g_atomic_reduction;
    __local int64_t *l_comm_values;
    __global int64_t *g_comm_values;
};


/* --- FORWARD DECLARATIONS --- */
uint64_t  func_1(struct S2 * p_683);
struct S1  func_5(uint64_t  p_6, int64_t  p_7, uint64_t  p_8, uint64_t  p_9, struct S2 * p_683);
uint64_t  func_10(int64_t  p_11, int16_t  p_12, struct S2 * p_683);
int16_t  func_24(uint16_t  p_25, int64_t * p_26, int64_t  p_27, uint64_t  p_28, int64_t * p_29, struct S2 * p_683);
uint8_t  func_33(uint32_t  p_34, int64_t * p_35, struct S2 * p_683);
struct S1  func_45(int64_t * p_46, uint8_t  p_47, int64_t * p_48, struct S2 * p_683);
int64_t * func_51(uint64_t  p_52, int64_t  p_53, int64_t * p_54, struct S2 * p_683);
uint8_t  func_64(uint64_t  p_65, int32_t  p_66, uint16_t  p_67, struct S2 * p_683);
uint32_t  func_68(int64_t  p_69, struct S0 * p_70, int64_t * p_71, struct S0 * p_72, struct S2 * p_683);
uint16_t  func_73(int64_t  p_74, int64_t * p_75, uint32_t  p_76, int64_t * p_77, uint32_t  p_78, struct S2 * p_683);


/* --- FUNCTIONS --- */
/* ------------------------------------------ */
/* 
 * reads : p_683->g_2 p_683->g_comm_values p_683->g_18 p_683->l_comm_values p_683->g_38 p_683->g_349.f2 p_683->g_125.f8 p_683->g_370 p_683->g_406 p_683->g_157 p_683->g_108.f3 p_683->g_125.f3 p_683->g_333 p_683->g_129.f4 p_683->g_57.f1 p_683->g_124.f4 p_683->g_123.f2 p_683->g_123.f7 p_683->g_129.f0 p_683->g_91 p_683->g_125.f2 p_683->g_349.f1 p_683->g_129.f9 p_683->g_510 p_683->g_126.f8 p_683->g_118 p_683->g_127.f8 p_683->g_396.f1 p_683->g_529 p_683->g_193 p_683->g_125.f9 p_683->g_396 p_683->g_349.f5 p_683->g_123.f0 p_683->g_585 p_683->g_598 p_683->g_534 p_683->g_129.f1 p_683->g_126.f3 p_683->g_613 p_683->g_349.f4 p_683->g_127.f6 p_683->g_626 p_683->g_630 p_683->g_192 p_683->g_371 p_683->g_335
 * writes: p_683->g_2 p_683->g_18 p_683->g_30 p_683->g_129.f6 p_683->g_157 p_683->g_122.f9 p_683->g_125.f8 p_683->g_122.f7 p_683->g_125.f5 p_683->g_126.f5 p_683->g_108.f5 p_683->g_365 p_683->g_127.f2 p_683->g_123.f2 p_683->g_118 p_683->g_91 p_683->g_122.f4 p_683->g_129.f9 p_683->g_193 p_683->g_529 p_683->g_125.f9 p_683->g_349.f5 p_683->g_396 p_683->g_108.f4 p_683->g_129.f1 p_683->g_124.f2 p_683->g_627 p_683->g_598.f5 p_683->g_631 p_683->g_132 p_683->g_99 p_683->g_534
 */
uint64_t  func_1(struct S2 * p_683)
{ /* block id: 4 */
    uint64_t l_13 = 0x952F34111D018875L;
    int64_t *l_49 = &p_683->g_50;
    int32_t l_587 = 0L;
    int32_t l_590[4] = {0x751E7654L,0x751E7654L,0x751E7654L,0x751E7654L};
    int32_t l_614 = 1L;
    VECTOR(int32_t, 2) l_637 = (VECTOR(int32_t, 2))((-1L), 1L);
    VECTOR(uint16_t, 16) l_677 = (VECTOR(uint16_t, 16))(0x8358L, (VECTOR(uint16_t, 4))(0x8358L, (VECTOR(uint16_t, 2))(0x8358L, 65533UL), 65533UL), 65533UL, 0x8358L, 65533UL, (VECTOR(uint16_t, 2))(0x8358L, 65533UL), (VECTOR(uint16_t, 2))(0x8358L, 65533UL), 0x8358L, 65533UL, 0x8358L, 65533UL);
    int i;
    for (p_683->g_2 = 0; (p_683->g_2 > (-8)); p_683->g_2 = safe_sub_func_int32_t_s_s(p_683->g_2, 6))
    { /* block id: 7 */
        int64_t *l_14 = (void*)0;
        int64_t *l_15 = (void*)0;
        int64_t *l_16 = (void*)0;
        int64_t *l_17 = (void*)0;
        int64_t *l_19 = (void*)0;
        int64_t *l_20 = (void*)0;
        int64_t *l_21 = (void*)0;
        int64_t *l_22 = (void*)0;
        int64_t *l_23[3][9] = {{(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0},{(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0},{(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0,(void*)0}};
        int64_t **l_368 = &l_15;
        int64_t **l_369 = &l_19;
        uint32_t *l_397 = (void*)0;
        uint32_t *l_398 = &p_683->g_129[0][1].f6;
        int32_t l_404 = 0L;
        uint16_t l_564[6];
        struct S1 *l_586 = &p_683->g_396[6];
        int32_t *l_588[1][8][6];
        int32_t l_589 = (-9L);
        uint16_t l_591 = 6UL;
        int32_t *l_632 = &p_683->g_157;
        int32_t l_642 = (-2L);
        struct S0 *l_649[8] = {&p_683->g_650,&p_683->g_650,&p_683->g_650,&p_683->g_650,&p_683->g_650,&p_683->g_650,&p_683->g_650,&p_683->g_650};
        uint64_t l_654 = 0xDF3058BE5F409954L;
        int i, j, k;
        for (i = 0; i < 6; i++)
            l_564[i] = 65531UL;
        for (i = 0; i < 1; i++)
        {
            for (j = 0; j < 8; j++)
            {
                for (k = 0; k < 6; k++)
                    l_588[i][j][k] = &l_587;
            }
        }
        (*l_586) = func_5(func_10((p_683->g_18.x ^= (p_683->g_comm_values[p_683->tid] , l_13)), func_24(p_683->l_comm_values[(safe_mod_func_uint32_t_u_u(p_683->tid, 215))], l_20, (p_683->l_comm_values[(safe_mod_func_uint32_t_u_u(p_683->tid, 215))] != (p_683->g_30 = ((VECTOR(int64_t, 4))(max(((VECTOR(int64_t, 2))(0x4FF2FD6B221494FBL, 1L)).xyxy, (int64_t)1L))).w)), (safe_div_func_uint64_t_u_u((func_33(((*l_398) = (safe_div_func_int16_t_s_s(((VECTOR(int16_t, 2))(p_683->g_38.sd8)).odd, ((safe_mod_func_int32_t_s_s((safe_add_func_uint64_t_u_u(p_683->g_38.s6, (safe_mul_func_int16_t_s_s(((VECTOR(int16_t, 4))(0x6397L, (func_45(l_49, ((((*l_369) = ((*l_368) = func_51(p_683->g_comm_values[p_683->tid], l_13, l_14, p_683))) == p_683->g_370) == 5L), p_683->g_370, p_683) , (-1L)), 1L, 0x2657L)).x, p_683->g_349[3][1].f2)))), p_683->g_125.f8)) && 0x44L)))), p_683->g_370, p_683) < l_404), l_404)), l_49, p_683), p_683), l_404, l_13, l_564[2], p_683);
        if ((**p_683->g_510))
            continue;
        l_591--;
        for (p_683->g_108.f4 = 0; (p_683->g_108.f4 == 47); p_683->g_108.f4++)
        { /* block id: 270 */
            uint64_t *l_605 = &p_683->g_129[0][1].f1;
            int32_t l_612 = 0L;
            for (l_587 = 21; (l_587 != 27); l_587 = safe_add_func_int8_t_s_s(l_587, 3))
            { /* block id: 273 */
                (*p_683->g_406) = (p_683->g_598 , 0x38F24A80L);
            }
            l_612 = (p_683->g_534.s4 <= (safe_mod_func_int32_t_s_s((safe_sub_func_uint8_t_u_u(((safe_add_func_uint8_t_u_u(((++(*l_605)) | ((safe_mod_func_int8_t_s_s(p_683->g_126[2][2].f3, 0x11L)) , ((safe_rshift_func_uint16_t_u_u(l_612, 3)) || (p_683->g_613 , l_614)))), (safe_sub_func_uint16_t_u_u(((safe_sub_func_int64_t_s_s((safe_div_func_uint16_t_u_u((1L < 0x5EC42F8EL), (0UL || p_683->g_349[3][1].f4))), p_683->g_333.x)) , l_612), p_683->g_127.f6)))) & 3L), p_683->g_333.x)), 0x58408C5AL)));
            for (p_683->g_124.f2 = (-15); (p_683->g_124.f2 > 50); p_683->g_124.f2 = safe_add_func_int64_t_s_s(p_683->g_124.f2, 5))
            { /* block id: 280 */
                int64_t l_625 = (-1L);
                int32_t l_638[1][5];
                int8_t *l_643 = &p_683->g_299;
                int16_t *l_645 = &p_683->g_30;
                int16_t *l_646 = &p_683->g_91;
                struct S0 *l_648 = (void*)0;
                int i, j;
                for (i = 0; i < 1; i++)
                {
                    for (j = 0; j < 5; j++)
                        l_638[i][j] = 0x19272E8DL;
                }
                if (l_587)
                { /* block id: 281 */
                    int32_t *l_623 = &p_683->g_157;
                    int32_t **l_624 = &l_588[0][3][5];
                    (*l_624) = l_623;
                    if (l_625)
                        break;
                    p_683->g_627 = p_683->g_626;
                    return l_612;
                }
                else
                { /* block id: 286 */
                    int32_t *l_633 = &l_590[2];
                    for (p_683->g_598.f5 = 2; (p_683->g_598.f5 == 13); p_683->g_598.f5 = safe_add_func_int64_t_s_s(p_683->g_598.f5, 1))
                    { /* block id: 289 */
                        uint8_t l_634 = 1UL;
                        p_683->g_631[0] = p_683->g_630;
                        l_588[0][0][2] = (*p_683->g_192);
                        l_633 = l_632;
                        (*l_586) = func_45((l_612 , (void*)0), l_634, l_605, p_683);
                    }
                    for (p_683->g_122.f7 = 5; (p_683->g_122.f7 == 23); p_683->g_122.f7 = safe_add_func_uint16_t_u_u(p_683->g_122.f7, 4))
                    { /* block id: 297 */
                        return (*l_632);
                    }
                }
                l_638[0][4] |= ((VECTOR(int32_t, 8))(clz(((VECTOR(int32_t, 16))(((VECTOR(int32_t, 2))((-5L), (-5L))).lo, (**p_683->g_192), ((VECTOR(int32_t, 8))(((VECTOR(int32_t, 8))(((VECTOR(int32_t, 8))(l_637.yxxyxxyy)))))), ((VECTOR(int32_t, 4))(0x04C47014L, 0x2F7436DBL, 0x38558A78L, 0L)), (-1L), 0x17C698C2L)).hi))).s7;
                l_637.x ^= ((VECTOR(int32_t, 16))(((VECTOR(int32_t, 2))(sub_sat(((VECTOR(int32_t, 2))(p_683->g_639.xw)), ((VECTOR(int32_t, 2))(((VECTOR(int32_t, 16))(((((-7L) < (((safe_mul_func_int8_t_s_s(((*l_643) ^= (l_642 ^ p_683->g_627.f2)), ((((safe_unary_minus_func_int16_t_s(((*l_646) = ((*l_645) |= p_683->g_125.f8)))) <= (l_643 == ((p_683->g_127.f4 != ((*l_605) = ((void*)0 != p_683->g_469))) , p_683->g_647))) , 0L) && l_638[0][4]))) < p_683->g_630.f4) , (*p_683->g_193))) , l_648) == l_649[4]), 0x16702E4CL, (*p_683->g_193), (**p_683->g_510), 0x27275A73L, ((VECTOR(int32_t, 8))(0x66A4DA41L)), 0L, 0x28F3ED80L, 0x72A79292L)).s0f))))).yxyxyyyyxxyyxyyy)).s9;
                --l_654;
            }
            if ((*p_683->g_406))
            { /* block id: 309 */
                (*l_632) ^= ((VECTOR(int32_t, 16))(p_683->g_657.s3656416756737601)).s3;
            }
            else
            { /* block id: 311 */
                uint32_t l_660 = 0UL;
                int64_t **l_669 = (void*)0;
                int64_t *l_670 = &p_683->g_118[0];
                int8_t *l_671 = (void*)0;
                int8_t *l_672 = &p_683->g_299;
                uint16_t *l_676 = &p_683->g_129[0][1].f2;
                int32_t *l_682 = &p_683->g_157;
                p_683->g_534.s3 ^= (safe_add_func_uint64_t_u_u(((*l_605) ^= l_660), (safe_sub_func_uint16_t_u_u(((VECTOR(uint16_t, 16))(0x0EA0L, 0xCF79L, (safe_mod_func_int8_t_s_s((safe_lshift_func_uint8_t_u_s(GROUP_DIVERGE(1, 1), ((*l_672) = (safe_div_func_int8_t_s_s(((GROUP_DIVERGE(1, 1) == ((l_605 != (l_670 = &p_683->g_118[0])) ^ p_683->g_132.f3)) < (~(*l_632))), l_660))))), (safe_lshift_func_int8_t_s_s(p_683->g_652.f7, 2)))), ((VECTOR(uint16_t, 2))(p_683->g_675.se1)), 0x414CL, ((*l_676) = (~1UL)), ((VECTOR(uint16_t, 2))(l_677.s53)), 1UL, (GROUP_DIVERGE(1, 1) >= (!((GROUP_DIVERGE(0, 1) ^ (!((VECTOR(uint64_t, 4))(((VECTOR(uint64_t, 8))(((VECTOR(uint64_t, 4))(upsample(((VECTOR(uint32_t, 16))(p_683->g_678.s0250461312427213)).s9da3, ((VECTOR(uint32_t, 2))(min(((VECTOR(uint32_t, 2))(abs(((VECTOR(int32_t, 8))(((VECTOR(int32_t, 4))((((p_683->g_396[1] , &l_591) == (void*)0) >= l_612), 0L, 0L, 0x439605B4L)).wyzzwxyw)).s54))), (uint32_t)4294967295UL))).xyyx))), 4UL, l_612, 18446744073709551613UL, 0xB3ED4DC0A7E4E911L)).odd)).y)) == 18446744073709551615UL))), 0x7FA1L, l_13, ((VECTOR(uint16_t, 2))(0xD1CAL)), 6UL)).s4, p_683->g_127.f6))));
                for (p_683->g_598.f5 = 0; (p_683->g_598.f5 == 14); ++p_683->g_598.f5)
                { /* block id: 319 */
                    int32_t **l_681[10][8][3] = {{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}},{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}},{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}},{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}},{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}},{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}},{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}},{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}},{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}},{{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]},{&p_683->g_193,&l_632,&l_588[0][0][1]}}};
                    int i, j, k;
                    l_682 = &l_614;
                }
                if (l_612)
                    continue;
            }
        }
    }
    (*p_683->g_193) = l_677.s3;
    return p_683->g_598.f1;
}


/* ------------------------------------------ */
/* 
 * reads : p_683->g_122.f4 p_683->g_396 p_683->g_349.f5 p_683->g_122.f1 p_683->g_57.f5 p_683->g_371.f3 p_683->g_122.f0 p_683->g_123.f0 p_683->g_585
 * writes: p_683->g_122.f4 p_683->g_349.f5
 */
struct S1  func_5(uint64_t  p_6, int64_t  p_7, uint64_t  p_8, uint64_t  p_9, struct S2 * p_683)
{ /* block id: 254 */
    int32_t *l_565 = (void*)0;
    int32_t *l_566[9][3][4] = {{{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2},{&p_683->g_2,(void*)0,&p_683->g_2,&p_683->g_2}}};
    uint32_t l_567 = 0UL;
    uint16_t l_568 = 0xE444L;
    int16_t *l_573 = (void*)0;
    int i, j, k;
    l_567 = (-2L);
    --l_568;
    for (p_683->g_122.f4 = 21; (p_683->g_122.f4 <= 51); p_683->g_122.f4 = safe_add_func_int16_t_s_s(p_683->g_122.f4, 6))
    { /* block id: 259 */
        int16_t *l_574 = (void*)0;
        int16_t **l_575 = (void*)0;
        int16_t **l_576 = &l_574;
        uint8_t *l_577 = &p_683->g_349[3][1].f5;
        int32_t l_584 = 0x49E9BDB3L;
        l_584 = (((((*l_577) |= (l_573 != (p_683->g_396[6] , ((*l_576) = l_574)))) || (0L >= (safe_mul_func_uint16_t_u_u((!(((p_6 , (safe_add_func_uint64_t_u_u((p_6 , (((((VECTOR(uint8_t, 16))(0x4FL, 1UL, 0xB2L, ((VECTOR(uint8_t, 2))(rhadd(((VECTOR(uint8_t, 2))(rhadd(((VECTOR(uint8_t, 16))(((VECTOR(uint8_t, 8))(((VECTOR(uint8_t, 2))(abs(((VECTOR(uint8_t, 2))(5UL, 0xA7L))))), 255UL, ((VECTOR(uint8_t, 2))(0xF1L, 0UL)), ((((-1L) != (safe_mul_func_uint16_t_u_u(p_683->g_122.f1, p_683->g_57.f5))) ^ p_8) < p_683->g_371[1].f3), 0x03L, 249UL)), 0x31L, 3UL, ((VECTOR(uint8_t, 2))(0x7AL)), p_683->g_122.f0, 1UL, 0xD6L, 1UL)).sb4, ((VECTOR(uint8_t, 2))(0x74L))))), ((VECTOR(uint8_t, 2))(3UL))))), 0x68L, 255UL, 255UL, 246UL, ((VECTOR(uint8_t, 2))(0xA8L)), 0xC8L, 1UL, p_9, 0x47L, 251UL)).sf | p_8) && FAKE_DIVERGE(p_683->local_2_offset, get_local_id(2), 10)) , l_584)), 0x0D7C0A7D431FB6B3L))) , 0xDDL) > l_584)), p_683->g_123[4].f0)))) | (-3L)) <= 0UL);
    }
    return p_683->g_585[0];
}


/* ------------------------------------------ */
/* 
 * reads : p_683->g_125.f3 p_683->l_comm_values p_683->g_333 p_683->g_129.f4 p_683->g_57.f1 p_683->g_124.f4 p_683->g_406 p_683->g_127.f5 p_683->g_132.f4 p_683->g_127.f2 p_683->g_396.f5 p_683->g_467 p_683->g_123.f2 p_683->g_123.f7 p_683->g_396 p_683->g_122.f0 p_683->g_349.f3 p_683->g_129.f3 p_683->g_129.f0 p_683->g_91 p_683->g_125.f2 p_683->g_349.f1 p_683->g_122.f4 p_683->g_129.f9 p_683->g_510 p_683->g_513 p_683->g_126.f8 p_683->g_526 p_683->g_299 p_683->g_193 p_683->g_108.f4 p_683->g_118 p_683->g_127.f8 p_683->g_157 p_683->g_529 p_683->g_124.f9 p_683->g_192 p_683->g_534 p_683->g_38 p_683->g_124.f5 p_683->g_129.f5 p_683->g_349.f2 p_683->g_546 p_683->g_125.f9 p_683->g_559
 * writes: p_683->g_125.f5 p_683->g_126.f5 p_683->g_157 p_683->g_108.f5 p_683->g_299 p_683->g_365 p_683->g_127.f2 p_683->g_123.f2 p_683->g_118 p_683->g_91 p_683->g_122.f4 p_683->g_129.f9 p_683->g_193 p_683->g_529 p_683->g_125.f9
 */
uint64_t  func_10(int64_t  p_11, int16_t  p_12, struct S2 * p_683)
{ /* block id: 212 */
    uint8_t *l_431 = &p_683->g_126[2][2].f5;
    uint8_t **l_430 = &l_431;
    VECTOR(uint16_t, 8) l_440 = (VECTOR(uint16_t, 8))(0x98C2L, (VECTOR(uint16_t, 4))(0x98C2L, (VECTOR(uint16_t, 2))(0x98C2L, 0x159AL), 0x159AL), 0x159AL, 0x98C2L, 0x159AL);
    VECTOR(uint16_t, 8) l_441 = (VECTOR(uint16_t, 8))(65535UL, (VECTOR(uint16_t, 4))(65535UL, (VECTOR(uint16_t, 2))(65535UL, 65534UL), 65534UL), 65534UL, 65535UL, 65534UL);
    VECTOR(uint16_t, 16) l_442 = (VECTOR(uint16_t, 16))(5UL, (VECTOR(uint16_t, 4))(5UL, (VECTOR(uint16_t, 2))(5UL, 0xA8BBL), 0xA8BBL), 0xA8BBL, 5UL, 0xA8BBL, (VECTOR(uint16_t, 2))(5UL, 0xA8BBL), (VECTOR(uint16_t, 2))(5UL, 0xA8BBL), 5UL, 0xA8BBL, 5UL, 0xA8BBL);
    VECTOR(uint32_t, 2) l_443 = (VECTOR(uint32_t, 2))(7UL, 0xC6906157L);
    uint8_t *l_456 = &p_683->g_125.f5;
    uint8_t *l_457 = &p_683->g_126[2][2].f5;
    uint8_t l_458 = 255UL;
    int32_t *l_459[1];
    VECTOR(uint32_t, 4) l_460 = (VECTOR(uint32_t, 4))(0x0921FE37L, (VECTOR(uint32_t, 2))(0x0921FE37L, 0x9EB68066L), 0x9EB68066L);
    VECTOR(uint32_t, 16) l_461 = (VECTOR(uint32_t, 16))(4294967295UL, (VECTOR(uint32_t, 4))(4294967295UL, (VECTOR(uint32_t, 2))(4294967295UL, 0x0F043447L), 0x0F043447L), 0x0F043447L, 4294967295UL, 0x0F043447L, (VECTOR(uint32_t, 2))(4294967295UL, 0x0F043447L), (VECTOR(uint32_t, 2))(4294967295UL, 0x0F043447L), 4294967295UL, 0x0F043447L, 4294967295UL, 0x0F043447L);
    int64_t ***l_466 = (void*)0;
    int8_t *l_470 = &p_683->g_299;
    uint32_t *l_471 = (void*)0;
    uint32_t *l_472 = &p_683->g_365;
    uint16_t *l_473 = (void*)0;
    uint16_t *l_474 = &p_683->g_127.f2;
    VECTOR(uint16_t, 8) l_483 = (VECTOR(uint16_t, 8))(0x3B8BL, (VECTOR(uint16_t, 4))(0x3B8BL, (VECTOR(uint16_t, 2))(0x3B8BL, 0x9AB1L), 0x9AB1L), 0x9AB1L, 0x3B8BL, 0x9AB1L);
    VECTOR(int16_t, 8) l_524 = (VECTOR(int16_t, 8))(0x638DL, (VECTOR(int16_t, 4))(0x638DL, (VECTOR(int16_t, 2))(0x638DL, 0x3764L), 0x3764L), 0x3764L, 0x638DL, 0x3764L);
    uint32_t l_528 = 4294967295UL;
    struct S0 *l_536 = &p_683->g_126[2][2];
    int16_t l_539 = 4L;
    uint64_t l_547 = 18446744073709551608UL;
    int64_t *l_548 = (void*)0;
    int64_t *l_549 = &p_683->g_118[0];
    uint32_t *l_551 = &p_683->g_124.f9;
    uint32_t **l_550 = &l_551;
    uint32_t *l_552 = (void*)0;
    uint32_t *l_553[3][10][7] = {{{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9}},{{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9}},{{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9},{(void*)0,(void*)0,&p_683->g_126[2][2].f9,&p_683->g_127.f9,(void*)0,&p_683->g_127.f9,&p_683->g_126[2][2].f9}}};
    uint64_t l_554 = 18446744073709551606UL;
    VECTOR(int16_t, 2) l_555 = (VECTOR(int16_t, 2))(1L, 0x4970L);
    int64_t ***l_558 = (void*)0;
    int64_t **l_560 = &p_683->g_370;
    uint32_t l_563 = 4294967295UL;
    int i, j, k;
    for (i = 0; i < 1; i++)
        l_459[i] = &p_683->g_157;
    p_683->g_108.f5 = ((*p_683->g_406) = (safe_add_func_uint64_t_u_u((safe_div_func_int64_t_s_s((safe_rshift_func_int8_t_s_s((((safe_mod_func_int32_t_s_s(((safe_div_func_int8_t_s_s(((&p_683->g_82 == ((*l_430) = &p_683->g_82)) == p_11), (safe_mul_func_uint8_t_u_u(((*l_457) = ((*l_456) = (safe_div_func_int16_t_s_s((safe_add_func_int8_t_s_s((safe_rshift_func_uint16_t_u_s(((VECTOR(uint16_t, 16))(((VECTOR(uint16_t, 4))(((VECTOR(uint16_t, 16))(((VECTOR(uint16_t, 4))(mad_hi(((VECTOR(uint16_t, 4))(mul_hi(((VECTOR(uint16_t, 16))(l_440.s0511660336621472)).s9660, ((VECTOR(uint16_t, 2))(2UL, 0xB775L)).xyxy))), ((VECTOR(uint16_t, 4))(l_441.s7414)), ((VECTOR(uint16_t, 16))(l_442.s42cbf17c0eba2a5d)).sfbb7))).wyyzywxxzyxzxwzy)).sc7b3)).xwxyxwxxxywzxxyw)).sd, 3)), (((VECTOR(uint32_t, 16))(l_443.xyxyyyyyxxyyyyyy)).sc < (((safe_div_func_uint32_t_u_u(p_683->g_125.f3, p_11)) != (0x9976C1390E440E09L & (safe_mul_func_uint16_t_u_u(((p_683->l_comm_values[(safe_mod_func_uint32_t_u_u(p_683->tid, 215))] <= (p_683->g_333.y == ((safe_mod_func_int64_t_s_s(((safe_mod_func_uint8_t_u_u((safe_div_func_uint64_t_u_u(((~(safe_lshift_func_uint16_t_u_u((l_440.s4 & p_11), 11))) > 1L), 0x43F73044B0D6E6F6L)), GROUP_DIVERGE(0, 1))) < p_12), l_441.s1)) , p_11))) >= GROUP_DIVERGE(2, 1)), p_11)))) , p_12)))), FAKE_DIVERGE(p_683->global_2_offset, get_global_id(2), 10))))), p_683->g_129[0][1].f4)))) && p_683->g_57.f1), p_683->g_124.f4)) != l_458) < p_12), 2)), 0xA5A7E612C987DF4AL)), 18446744073709551609UL)));
    if (((p_683->g_123[4].f2 |= ((*l_474) = (((*l_472) = ((VECTOR(uint32_t, 16))(0x908B18DFL, 4294967289UL, ((VECTOR(uint32_t, 2))(min(((VECTOR(uint32_t, 4))(((VECTOR(uint32_t, 8))(0UL, 4294967295UL, ((VECTOR(uint32_t, 2))(l_460.xz)), ((VECTOR(uint32_t, 2))(((VECTOR(uint32_t, 4))(((VECTOR(uint32_t, 8))(p_683->g_127.f5, 4294967295UL, p_683->g_132.f4, 0xBB1074C3L, 0xEBE84573L, ((VECTOR(uint32_t, 2))(((VECTOR(uint32_t, 16))(l_461.s2c795dbae5da38f3)).sa6)), 4294967290UL)).even)).even)), 4294967289UL, 0x1FBBC128L)).lo)).odd, (uint32_t)(safe_mul_func_int8_t_s_s((safe_sub_func_uint16_t_u_u(65531UL, (+p_683->g_127.f2))), ((*l_470) = (((0x02491D56L || (l_466 == (p_683->g_396[6].f5 , p_683->g_467))) ^ 8L) | 0x6EL))))))), 0xBA9CD608L, ((VECTOR(uint32_t, 8))(4294967290UL)), ((VECTOR(uint32_t, 2))(0UL)), 0x50A61237L)).s8) , FAKE_DIVERGE(p_683->global_1_offset, get_global_id(1), 10)))) & 0x0F12L))
    { /* block id: 222 */
        int32_t l_475 = 0x247F6B8EL;
        uint16_t **l_476 = &l_473;
        VECTOR(int32_t, 16) l_484 = (VECTOR(int32_t, 16))((-6L), (VECTOR(int32_t, 4))((-6L), (VECTOR(int32_t, 2))((-6L), 6L), 6L), 6L, (-6L), 6L, (VECTOR(int32_t, 2))((-6L), 6L), (VECTOR(int32_t, 2))((-6L), 6L), (-6L), 6L, (-6L), 6L);
        VECTOR(int8_t, 2) l_487 = (VECTOR(int8_t, 2))(0x6BL, 0x0BL);
        VECTOR(int8_t, 16) l_488 = (VECTOR(int8_t, 16))((-1L), (VECTOR(int8_t, 4))((-1L), (VECTOR(int8_t, 2))((-1L), (-1L)), (-1L)), (-1L), (-1L), (-1L), (VECTOR(int8_t, 2))((-1L), (-1L)), (VECTOR(int8_t, 2))((-1L), (-1L)), (-1L), (-1L), (-1L), (-1L));
        int32_t l_491 = 0x776D2468L;
        int64_t *l_492 = (void*)0;
        int64_t *l_493 = &p_683->g_118[0];
        int16_t *l_494 = &p_683->g_91;
        int32_t l_495 = 5L;
        uint8_t l_506[5][4] = {{0x46L,0x46L,9UL,0x64L},{0x46L,0x46L,9UL,0x64L},{0x46L,0x46L,9UL,0x64L},{0x46L,0x46L,9UL,0x64L},{0x46L,0x46L,9UL,0x64L}};
        int i, j;
        atomic_max(&p_683->l_atomic_reduction[0], (l_475 = l_475) + get_linear_global_id());
        barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
        if (get_linear_local_id() == 0)
            p_683->v_collective += p_683->l_atomic_reduction[0];
        barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
        (*p_683->g_406) = (((p_683->g_123[4].f7 < (((*l_476) = &p_683->g_99) == l_474)) , p_12) <= ((((safe_lshift_func_int16_t_s_s(((*l_494) &= (safe_div_func_int64_t_s_s(((*l_493) = ((VECTOR(int64_t, 8))(mad_sat(((VECTOR(int64_t, 16))(add_sat(((VECTOR(int64_t, 8))((((((((((safe_div_func_uint16_t_u_u(((VECTOR(uint16_t, 16))(((VECTOR(uint16_t, 4))(l_483.s3313)).zyyzwzxxyxxxyxwz)).s0, l_475)) == (l_491 &= (p_683->g_396[0] , (((VECTOR(int64_t, 8))(((VECTOR(int64_t, 16))(add_sat(((VECTOR(int64_t, 8))(upsample(((VECTOR(int32_t, 16))(((VECTOR(int32_t, 8))(l_484.s3995dfdd)), (safe_mod_func_int32_t_s_s((0xDCL == ((*l_470) = ((VECTOR(int8_t, 16))(((VECTOR(int8_t, 16))(sub_sat(((VECTOR(int8_t, 8))(l_487.xxxxyxyy)).s6323033421243136, ((VECTOR(int8_t, 16))(l_488.s1eaa17cdee6edd32))))))).s6)), (safe_add_func_uint64_t_u_u(FAKE_DIVERGE(p_683->global_1_offset, get_global_id(1), 10), 0xA232D174DCE933A7L)))), ((VECTOR(int32_t, 2))(mad_sat(((VECTOR(int32_t, 4))(((VECTOR(int32_t, 8))(sub_sat(((VECTOR(int32_t, 16))((((*l_470) = (p_683->g_122.f0 <= p_12)) != 0x15L), p_683->g_349[3][1].f3, (-1L), ((VECTOR(int32_t, 8))((-10L))), 0x5C586C02L, ((VECTOR(int32_t, 4))(0x063DF275L)))).even, ((VECTOR(int32_t, 8))(0x7C50C7DBL))))).odd)).hi, ((VECTOR(int32_t, 2))(0x183BCDE6L)), ((VECTOR(int32_t, 2))((-8L)))))), ((VECTOR(int32_t, 4))(0x790FBE0DL)), 0x45A8C566L)).hi, ((VECTOR(uint32_t, 8))(0xA026624DL))))).s3225202744064263, ((VECTOR(int64_t, 16))((-9L)))))).hi)).s0 <= 9L)))) , p_12) , p_683->g_129[0][1].f3) == 0x65315A8B1347ED16L) , &p_683->g_355[3][3]) == (void*)0) | 0L) != l_475), ((VECTOR(int64_t, 4))((-4L))), ((VECTOR(int64_t, 2))(0x79E3E51C447D5929L)), 0x6180C6DEFA50601DL)).s6204402446170751, ((VECTOR(int64_t, 16))(0L))))).lo, ((VECTOR(int64_t, 8))(0x3920282C7677DFB4L)), ((VECTOR(int64_t, 8))(0L))))).s6), p_683->g_129[0][1].f0))), p_683->g_125.f2)) , GROUP_DIVERGE(2, 1)) || p_683->g_349[3][1].f1) == l_495));
        for (p_683->g_122.f4 = 0; (p_683->g_122.f4 > 60); p_683->g_122.f4++)
        { /* block id: 234 */
            uint32_t *l_503 = &p_683->g_129[0][1].f9;
            int32_t l_507[4];
            int i;
            for (i = 0; i < 4; i++)
                l_507[i] = (-8L);
            l_507[3] = (safe_lshift_func_int16_t_s_s((safe_lshift_func_int16_t_s_s(((-1L) > (safe_unary_minus_func_uint32_t_u(((*l_503)++)))), l_506[0][0])), 2));
        }
    }
    else
    { /* block id: 238 */
        int8_t l_508[1][10] = {{(-1L),(-1L),(-1L),(-1L),(-1L),(-1L),(-1L),(-1L),(-1L),(-1L)}};
        int32_t *l_509 = &p_683->g_157;
        VECTOR(int16_t, 2) l_525 = (VECTOR(int16_t, 2))((-1L), 7L);
        uint8_t l_527 = 255UL;
        struct S0 *l_535[2][6][6] = {{{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]}},{{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]},{&p_683->g_125,&p_683->g_124,&p_683->g_123[0],&p_683->g_123[4],&p_683->g_124,&p_683->g_123[4]}}};
        int i, j, k;
        l_508[0][6] = p_12;
        (*p_683->g_510) = l_509;
        p_683->g_529 |= ((-1L) || ((safe_sub_func_uint64_t_u_u((p_11 , ((&l_509 == &p_683->g_193) >= ((VECTOR(uint8_t, 4))(p_12, ((VECTOR(uint8_t, 2))(p_683->g_513.yx)), 1UL)).z)), ((safe_lshift_func_uint8_t_u_u((safe_mul_func_uint8_t_u_u(p_683->g_126[2][2].f8, (safe_add_func_uint32_t_u_u((safe_add_func_uint64_t_u_u((safe_mul_func_int8_t_s_s(((((VECTOR(int16_t, 16))(sub_sat(((VECTOR(int16_t, 2))(((VECTOR(int16_t, 2))(l_524.s14)))).yxyxxyxyxyyxyxyx, ((VECTOR(int16_t, 4))(((VECTOR(int16_t, 8))(((VECTOR(int16_t, 16))((-9L), 0x151FL, ((VECTOR(int16_t, 8))(l_525.yxyyyyxy)), ((VECTOR(int16_t, 4))(((VECTOR(int16_t, 2))(rotate(((VECTOR(int16_t, 4))(upsample(((VECTOR(int8_t, 4))(clz(((VECTOR(int8_t, 16))(0x5DL, ((*l_470) &= ((VECTOR(int8_t, 2))(((VECTOR(int8_t, 4))(p_683->g_526.xxyx)).even)).hi), 0x44L, 0x41L, (p_683->g_193 != (void*)0), (1L ^ p_683->g_108.f4), 1L, ((VECTOR(int8_t, 2))(1L)), 0x15L, 0L, (-1L), 0x25L, ((VECTOR(int8_t, 2))(9L)), 0x69L)).sde08))), ((VECTOR(uint8_t, 4))(0x33L))))).even, ((VECTOR(int16_t, 2))((-1L)))))).yyyy)), 0x03CFL, 1L)).lo)).lo)).zwxyxxxwyxzzwwzy))).sd == p_683->g_118[1]) & p_683->g_127.f8), FAKE_DIVERGE(p_683->group_0_offset, get_group_id(0), 10))), (*l_509))), 0x530B69B1L)))), p_683->g_396[6].f1)) != l_527))) < l_528));
        l_539 |= (safe_sub_func_int32_t_s_s(((safe_rshift_func_uint16_t_u_u(((GROUP_DIVERGE(2, 1) & (l_473 != &p_683->g_99)) , (((VECTOR(int32_t, 8))(((VECTOR(int32_t, 4))(((VECTOR(int32_t, 2))(((VECTOR(int32_t, 8))(0L, 0x4A2ABDADL, (*l_509), (p_683->g_124.f9 , (**p_683->g_192)), ((VECTOR(int32_t, 2))(p_683->g_534.s03)), 0x12A17F71L, (-1L))).s67)).xxxy)).yxwzxzzy)).s6 , (l_535[0][3][2] != l_536))), 12)) || ((VECTOR(int8_t, 16))(((VECTOR(int8_t, 4))(hadd(((VECTOR(int8_t, 4))(((VECTOR(int8_t, 4))(((VECTOR(int8_t, 4))(safe_clamp_func(VECTOR(int8_t, 4),VECTOR(int8_t, 4),((VECTOR(int8_t, 2))(((VECTOR(int8_t, 16))(0x7DL, ((VECTOR(int8_t, 4))((p_683->g_299 = (safe_lshift_func_uint16_t_u_s(((VECTOR(uint16_t, 8))(((VECTOR(uint16_t, 8))(safe_clamp_func(VECTOR(uint16_t, 8),VECTOR(uint16_t, 8),((VECTOR(uint16_t, 4))(sub_sat(((VECTOR(uint16_t, 8))(((VECTOR(uint16_t, 2))(add_sat(((VECTOR(uint16_t, 16))(1UL, ((VECTOR(uint16_t, 4))(1UL, 0x3638L, 0x343CL, 65535UL)), ((VECTOR(uint16_t, 8))(((VECTOR(uint16_t, 4))(0x79E5L, 8UL, 0x377CL, 0UL)), ((*l_474) = (*l_509)), p_683->g_38.sb, 0x7A48L, 6UL)), p_683->g_124.f5, 65529UL, 0xB735L)).s6a, ((VECTOR(uint16_t, 2))(0x9745L))))).xyyxyxyx)).odd, ((VECTOR(uint16_t, 4))(0xA538L))))).yxxwxxwy, ((VECTOR(uint16_t, 8))(0x658AL)), ((VECTOR(uint16_t, 8))(0UL))))))).s5, (*l_509)))), ((VECTOR(int8_t, 2))((-4L))), 0x4CL)), 1L, ((VECTOR(int8_t, 2))(0x36L)), p_683->g_129[0][1].f5, 0x36L, p_12, ((VECTOR(int8_t, 2))(0x13L)), ((VECTOR(int8_t, 2))(0x76L)), 0x4EL)).sd1)).yxyx, ((VECTOR(int8_t, 4))(0x31L)), ((VECTOR(int8_t, 4))(7L))))))))), ((VECTOR(int8_t, 4))(3L))))).zwwzxzxwxxxyxyyz)).sa), (-10L)));
    }
    (*p_683->g_406) = ((p_683->g_125.f9 ^= (((VECTOR(uint64_t, 2))(((VECTOR(uint64_t, 16))(((VECTOR(uint64_t, 4))(0xC28E18EDD19D5194L, ((safe_lshift_func_int16_t_s_s((safe_rshift_func_int16_t_s_u(p_683->g_349[3][1].f2, 13)), ((VECTOR(int16_t, 8))(p_683->g_546.s9831a6ee)).s7)) & (&p_683->g_529 == l_473)), 18446744073709551615UL, 18446744073709551613UL)).wzwzxwxxxwyyxxyw)).s05)).odd ^ (l_547 & ((((*l_549) = ((p_683->g_125.f2 , (+4L)) >= 1L)) , ((*l_550) = p_683->g_193)) == (void*)0)))) >= l_554);
    l_563 = ((VECTOR(int32_t, 2))(upsample(((VECTOR(int16_t, 8))(((VECTOR(int16_t, 4))(mul_hi(((VECTOR(int16_t, 8))(l_555.xyyxyyxy)).hi, ((VECTOR(int16_t, 8))((-1L), (-4L), (-4L), (safe_add_func_int32_t_s_s((((0x6877L == ((l_558 == l_466) <= (p_683->g_349[3][1].f2 || ((VECTOR(uint32_t, 2))(p_683->g_559.s34)).lo))) , l_560) == (p_11 , &p_683->g_370)), (((*l_474)++) & p_11))), 0x0B5EL, 6L, 0x1452L, 3L)).odd))).xxzwywwz)).s74, ((VECTOR(uint16_t, 2))(1UL))))).hi;
    return p_11;
}


/* ------------------------------------------ */
/* 
 * reads : p_683->g_406 p_683->g_157 p_683->g_122.f9 p_683->g_125.f8 p_683->g_122.f7 p_683->g_108.f3
 * writes: p_683->g_157 p_683->g_122.f9 p_683->g_125.f8 p_683->g_122.f7
 */
int16_t  func_24(uint16_t  p_25, int64_t * p_26, int64_t  p_27, uint64_t  p_28, int64_t * p_29, struct S2 * p_683)
{ /* block id: 195 */
    VECTOR(int32_t, 8) l_405 = (VECTOR(int32_t, 8))(0x1D705AFFL, (VECTOR(int32_t, 4))(0x1D705AFFL, (VECTOR(int32_t, 2))(0x1D705AFFL, 0x76D81C6DL), 0x76D81C6DL), 0x76D81C6DL, 0x1D705AFFL, 0x76D81C6DL);
    int64_t l_416 = 0x2B85B75A3D138E69L;
    int i;
    (*p_683->g_406) ^= (0x4209A0DFL | ((VECTOR(int32_t, 2))(l_405.s30)).even);
    for (p_683->g_122.f9 = 0; (p_683->g_122.f9 > 60); ++p_683->g_122.f9)
    { /* block id: 199 */
        uint32_t l_417 = 0xD8A95853L;
        for (p_683->g_125.f8 = 0; (p_683->g_125.f8 != (-20)); --p_683->g_125.f8)
        { /* block id: 202 */
            int32_t *l_411 = (void*)0;
            int32_t **l_412 = &l_411;
            (*l_412) = l_411;
        }
        for (p_683->g_122.f7 = 0; (p_683->g_122.f7 == 5); ++p_683->g_122.f7)
        { /* block id: 207 */
            int32_t *l_415[1];
            int i;
            for (i = 0; i < 1; i++)
                l_415[i] = (void*)0;
            l_417--;
        }
    }
    return p_683->g_108.f3;
}


/* ------------------------------------------ */
/* 
 * reads :
 * writes:
 */
uint8_t  func_33(uint32_t  p_34, int64_t * p_35, struct S2 * p_683)
{ /* block id: 186 */
    int32_t l_403 = 1L;
    if ((atomic_inc(&p_683->g_atomic_input[89 * get_linear_group_id() + 59]) == 7))
    { /* block id: 188 */
        int32_t l_400 = 0L;
        int32_t *l_399 = &l_400;
        int32_t *l_401 = (void*)0;
        int32_t *l_402 = &l_400;
        l_402 = (l_401 = l_399);
        unsigned int result = 0;
        result += l_400;
        atomic_add(&p_683->g_special_values[89 * get_linear_group_id() + 59], result);
    }
    else
    { /* block id: 191 */
        (1 + 1);
    }
    return l_403;
}


/* ------------------------------------------ */
/* 
 * reads : p_683->g_371 p_683->g_99 p_683->g_123.f9 p_683->g_333 p_683->g_126.f2 p_683->g_335 p_683->g_118 p_683->g_396
 * writes: p_683->g_132 p_683->g_99
 */
struct S1  func_45(int64_t * p_46, uint8_t  p_47, int64_t * p_48, struct S2 * p_683)
{ /* block id: 175 */
    int16_t l_388 = (-1L);
    int32_t l_394 = 1L;
    p_683->g_132 = p_683->g_371[1];
    for (p_683->g_99 = 0; (p_683->g_99 < 49); ++p_683->g_99)
    { /* block id: 179 */
        int64_t **l_375[6] = {&p_683->g_370,&p_683->g_370,&p_683->g_370,&p_683->g_370,&p_683->g_370,&p_683->g_370};
        int64_t ***l_374 = &l_375[2];
        int8_t l_378 = 0L;
        uint16_t *l_393[7] = {&p_683->g_122.f2,&p_683->g_122.f2,&p_683->g_122.f2,&p_683->g_122.f2,&p_683->g_122.f2,&p_683->g_122.f2,&p_683->g_122.f2};
        int32_t l_395[3][2][2] = {{{(-1L),(-8L)},{(-1L),(-8L)}},{{(-1L),(-8L)},{(-1L),(-8L)}},{{(-1L),(-8L)},{(-1L),(-8L)}}};
        int i, j, k;
        (*l_374) = &p_48;
        l_395[1][1][1] ^= (safe_add_func_int32_t_s_s(((0x48L <= 0L) ^ l_378), (safe_mul_func_uint16_t_u_u((l_394 = (p_47 & (((safe_div_func_uint8_t_u_u(((((safe_add_func_uint32_t_u_u(0x8904504FL, (l_378 , (safe_mul_func_uint16_t_u_u(((VECTOR(uint16_t, 8))((safe_unary_minus_func_int8_t_s(l_388)), 1UL, (safe_add_func_uint16_t_u_u((safe_div_func_uint64_t_u_u(p_683->g_123[4].f9, FAKE_DIVERGE(p_683->group_1_offset, get_group_id(1), 10))), (p_683->g_333.y ^ p_683->g_126[2][2].f2))), ((VECTOR(uint16_t, 2))(0x1686L)), 6UL, 65531UL, 65530UL)).s4, p_47))))) <= (-7L)) != l_378) < 0x59L), 0xCCL)) <= p_683->g_335.x) > l_378))), p_683->g_118[0]))));
    }
    return p_683->g_396[6];
}


/* ------------------------------------------ */
/* 
 * reads : p_683->g_50 p_683->g_57 p_683->g_38 p_683->g_comm_values p_683->g_99 p_683->g_108 p_683->g_91 p_683->g_2 p_683->g_121 p_683->g_131 p_683->g_139 p_683->g_123.f9 p_683->g_125.f5 p_683->g_129.f2 p_683->g_123.f2 p_683->g_126.f9 p_683->g_124.f4 p_683->g_123.f8 p_683->g_124.f5 p_683->g_192 p_683->g_129.f3 p_683->g_125.f0 p_683->g_129 p_683->g_193 p_683->g_122.f5 p_683->g_300 p_683->g_313 p_683->g_330 p_683->g_333 p_683->g_335 p_683->g_349 p_683->g_127.f9 p_683->g_157 p_683->g_299 p_683->g_365
 * writes: p_683->g_50 p_683->g_57 p_683->g_82 p_683->g_91 p_683->g_99 p_683->g_118 p_683->g_108 p_683->g_132 p_683->g_127.f1 p_683->g_124.f7 p_683->g_125.f1 p_683->g_123.f2 p_683->g_126.f9 p_683->g_157 p_683->g_193 p_683->g_129 p_683->g_122.f5 p_683->g_300 p_683->g_127.f9 p_683->g_313 p_683->g_127.f2 p_683->g_330 p_683->g_299 p_683->g_333 p_683->g_355 p_683->g_124.f4 p_683->g_365
 */
int64_t * func_51(uint64_t  p_52, int64_t  p_53, int64_t * p_54, struct S2 * p_683)
{ /* block id: 10 */
    uint16_t l_79 = 0UL;
    int64_t *l_80[3][2];
    uint32_t l_120 = 4UL;
    struct S0 *l_128 = &p_683->g_129[0][1];
    int32_t l_296 = 0x746B1049L;
    int32_t l_297 = 0x3314E759L;
    int32_t l_298[5][5] = {{0x50E68FDFL,0x1024C3D8L,0x50E68FDFL,0x50E68FDFL,0x1024C3D8L},{0x50E68FDFL,0x1024C3D8L,0x50E68FDFL,0x50E68FDFL,0x1024C3D8L},{0x50E68FDFL,0x1024C3D8L,0x50E68FDFL,0x50E68FDFL,0x1024C3D8L},{0x50E68FDFL,0x1024C3D8L,0x50E68FDFL,0x50E68FDFL,0x1024C3D8L},{0x50E68FDFL,0x1024C3D8L,0x50E68FDFL,0x50E68FDFL,0x1024C3D8L}};
    VECTOR(int16_t, 2) l_334 = (VECTOR(int16_t, 2))(0x7BE4L, 0x4106L);
    int32_t *l_338 = &p_683->g_123[4].f8;
    int32_t **l_337[8] = {&l_338,&l_338,&l_338,&l_338,&l_338,&l_338,&l_338,&l_338};
    int i, j;
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 2; j++)
            l_80[i][j] = &p_683->g_50;
    }
    for (p_683->g_50 = (-5); (p_683->g_50 == (-17)); p_683->g_50 = safe_sub_func_int64_t_s_s(p_683->g_50, 4))
    { /* block id: 13 */
        volatile struct S0 *l_58[2];
        VECTOR(int32_t, 4) l_63 = (VECTOR(int32_t, 4))(0L, (VECTOR(int32_t, 2))(0L, 0L), 0L);
        uint8_t *l_81 = &p_683->g_82;
        int64_t *l_83 = &p_683->g_50;
        int32_t l_187 = 0x0617D44FL;
        int i;
        for (i = 0; i < 2; i++)
            l_58[i] = &p_683->g_57;
        p_683->g_57 = p_683->g_57;
        (*l_128) = (((*l_81) = ((safe_mul_func_int16_t_s_s((safe_sub_func_int32_t_s_s(((VECTOR(int32_t, 4))(l_63.wwwy)).y, (func_64(p_52, ((void*)0 == &p_683->g_57), ((func_68((l_63.y , ((func_73(l_79, l_80[2][1], (((*l_81) = l_63.x) , (((((l_79 || FAKE_DIVERGE(p_683->local_0_offset, get_local_id(0), 10)) ^ (((((((p_53 ^ p_683->g_38.s2) || l_63.w) , p_683->g_comm_values[p_683->tid]) | p_683->g_57.f8) <= 1L) <= 0x3EL) != p_52)) >= 248UL) || l_63.w) == 0x7645L)), l_83, p_683->g_38.s4, p_683) <= p_683->g_2) == l_120)), p_683->g_121[2][1], &p_683->g_50, l_128, p_683) ^ p_53) , l_187), p_683) , l_79))), 0L)) > p_683->g_125.f0)) , (*l_128));
        (*p_683->g_193) = (-1L);
    }
    for (p_683->g_122.f5 = 28; (p_683->g_122.f5 != 17); p_683->g_122.f5--)
    { /* block id: 133 */
        int32_t *l_294 = &p_683->g_157;
        int32_t *l_295[8];
        struct S0 *l_336 = (void*)0;
        int8_t *l_352 = &p_683->g_299;
        VECTOR(int64_t, 2) l_359 = (VECTOR(int64_t, 2))(0x593EAC41CE5B0B43L, 1L);
        int32_t l_364 = 0x019CC219L;
        int i;
        for (i = 0; i < 8; i++)
            l_295[i] = &p_683->g_157;
        p_683->g_300++;
        for (p_683->g_127.f9 = 3; (p_683->g_127.f9 < 24); p_683->g_127.f9 = safe_add_func_uint16_t_u_u(p_683->g_127.f9, 8))
        { /* block id: 137 */
            int16_t l_305[10] = {(-1L),0x38C4L,(-1L),(-1L),0x38C4L,(-1L),(-1L),0x38C4L,(-1L),(-1L)};
            uint8_t l_306 = 1UL;
            int32_t **l_309 = &l_295[2];
            int32_t l_310 = 0x25C887C6L;
            int32_t l_311 = 0x673DF16DL;
            int32_t l_312 = 0x28135809L;
            int i;
            if (p_52)
                break;
            l_306--;
            (*l_309) = l_295[0];
            ++p_683->g_313;
        }
        for (p_683->g_127.f2 = (-24); (p_683->g_127.f2 != 27); ++p_683->g_127.f2)
        { /* block id: 145 */
            int16_t l_320 = 4L;
            int32_t l_321 = 6L;
            int32_t l_322 = 3L;
            int32_t l_323 = (-1L);
            int32_t l_324 = 0L;
            int32_t l_325 = 0x699D50DFL;
            int32_t l_326 = 0x1644DFB6L;
            int32_t l_327 = (-9L);
            int32_t l_328 = 3L;
            int8_t *l_350 = &p_683->g_299;
            int16_t l_351 = (-9L);
            for (p_683->g_157 = 0; (p_683->g_157 < 17); p_683->g_157 = safe_add_func_int16_t_s_s(p_683->g_157, 6))
            { /* block id: 148 */
                return &p_683->g_50;
            }
            p_683->g_330--;
            atomic_sub(&p_683->l_atomic_reduction[0], ((GROUP_DIVERGE(1, 1) & (p_683->g_333.y = ((VECTOR(int16_t, 8))(((VECTOR(int16_t, 2))(((VECTOR(int16_t, 16))(((VECTOR(int16_t, 16))(add_sat(((VECTOR(int16_t, 2))(((VECTOR(int16_t, 16))(hadd(((VECTOR(int16_t, 4))(p_683->g_333.xxyy)).zxxxzwwzxwzwxxwz, ((VECTOR(int16_t, 4))(((VECTOR(int16_t, 4))(sub_sat(((VECTOR(int16_t, 4))(safe_clamp_func(VECTOR(int16_t, 4),VECTOR(int16_t, 4),((VECTOR(int16_t, 4))(0x2C9FL, 0L, 0x7DCCL, 0x0C88L)), ((VECTOR(int16_t, 2))(hadd(((VECTOR(int16_t, 2))(l_334.yy)), ((VECTOR(int16_t, 8))(upsample(((VECTOR(int8_t, 8))(((VECTOR(int8_t, 16))(((VECTOR(int8_t, 8))(mad_sat(((VECTOR(int8_t, 16))(p_683->g_335.xyyxyxyxxyxyyyyy)).lo, ((VECTOR(int8_t, 4))(hadd(((VECTOR(int8_t, 2))(safe_mad_hi_func_int8_t_s_s_s(VECTOR(int8_t, 2),((VECTOR(int8_t, 4))(mul_hi(((VECTOR(int8_t, 4))((l_128 == l_336), (-8L), 9L, 0x38L)), ((VECTOR(int8_t, 2))(((VECTOR(int8_t, 8))(((VECTOR(int8_t, 4))(((VECTOR(int8_t, 16))((l_337[0] == (void*)0), (0xE2FDFCECL & (((!((safe_mod_func_uint64_t_u_u(((0x4E8F5B15C7737430L == (((*l_350) = (safe_mul_func_uint8_t_u_u((safe_add_func_int8_t_s_s((safe_div_func_uint16_t_u_u(l_334.x, (p_683->g_349[3][1] , p_683->g_127.f9))), p_52)), (*l_294)))) > p_683->g_349[3][1].f6)) > p_52), 0x41787B2D922DA0A2L)) & p_52)) && l_351) >= p_52)), 0x5FL, (-10L), (-1L), p_683->g_57.f7, 0x2FL, p_683->g_129[0][1].f2, 0x69L, (-1L), 0x2EL, 0L, ((VECTOR(int8_t, 2))((-1L))), (-1L), (-1L))).s0bea)).xwxxywxy)).s04)).xxyy))).lo, ((VECTOR(int8_t, 2))(0x1AL)), ((VECTOR(int8_t, 2))((-7L)))))).yyyx, ((VECTOR(int8_t, 4))(0x46L))))).yzwyzyzy, ((VECTOR(int8_t, 8))(3L))))), 1L, 0x16L, ((VECTOR(int8_t, 2))((-8L))), (-1L), 1L, 0x38L, (-3L))).even)), ((VECTOR(uint8_t, 8))(0xE4L))))).s10))).xxxy, ((VECTOR(int16_t, 4))(0x3821L))))), ((VECTOR(int16_t, 4))(0x09BDL))))))).xzyzwwyyzzyxzwyx))).s31)).yxxxyxxxxxxyxyyy, ((VECTOR(int16_t, 16))(0x4225L))))))).s7e)).yxxxyyyx)).s7)) >= l_351));
            barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
            if (get_linear_local_id() == 0)
                p_683->v_collective += p_683->l_atomic_reduction[0];
            barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
        }
        if ((((*l_352) &= 0x7AL) != l_334.x))
        { /* block id: 157 */
            struct S0 **l_354[2];
            struct S0 ***l_353[10][9][2] = {{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}},{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}},{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}},{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}},{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}},{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}},{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}},{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}},{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}},{{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]},{&l_354[0],&l_354[0]}}};
            int i, j, k;
            for (i = 0; i < 2; i++)
                l_354[i] = (void*)0;
            p_683->g_355[6][2] = &p_683->g_121[2][1];
        }
        else
        { /* block id: 159 */
            struct S0 ***l_358 = &p_683->g_355[6][2];
            struct S0 **l_360 = &l_336;
            int32_t l_361 = 0x03639A36L;
            int32_t l_362 = 0x4EE5C1A3L;
            VECTOR(int32_t, 16) l_363 = (VECTOR(int32_t, 16))(0L, (VECTOR(int32_t, 4))(0L, (VECTOR(int32_t, 2))(0L, 0L), 0L), 0L, 0L, 0L, (VECTOR(int32_t, 2))(0L, 0L), (VECTOR(int32_t, 2))(0L, 0L), 0L, 0L, 0L, 0L);
            int i;
            for (p_683->g_124.f4 = 0; (p_683->g_124.f4 == 52); p_683->g_124.f4 = safe_add_func_uint16_t_u_u(p_683->g_124.f4, 5))
            { /* block id: 162 */
                if ((*p_683->g_193))
                    break;
            }
            l_361 = (((*l_358) = &l_336) == ((p_53 = ((VECTOR(int64_t, 16))(l_359.xyxyyyxxyxxyxyxx)).s9) , l_360));
            p_683->g_365--;
            (*l_360) = l_128;
        }
    }
    return l_80[0][0];
}


/* ------------------------------------------ */
/* 
 * reads : p_683->g_192 p_683->g_129.f3
 * writes: p_683->g_193
 */
uint8_t  func_64(uint64_t  p_65, int32_t  p_66, uint16_t  p_67, struct S2 * p_683)
{ /* block id: 55 */
    if ((atomic_inc(&p_683->g_atomic_input[89 * get_linear_group_id() + 66]) == 7))
    { /* block id: 57 */
        int8_t l_188 = 0x7AL;
        uint32_t l_189 = 1UL;
        --l_189;
        unsigned int result = 0;
        result += l_188;
        result += l_189;
        atomic_add(&p_683->g_special_values[89 * get_linear_group_id() + 66], result);
    }
    else
    { /* block id: 59 */
        (1 + 1);
    }
    (*p_683->g_192) = &p_683->g_157;
    if ((atomic_inc(&p_683->g_atomic_input[89 * get_linear_group_id() + 51]) == 4))
    { /* block id: 64 */
        int32_t l_194 = 4L;
        int32_t l_195 = 0x4C590541L;
        int32_t l_196 = 7L;
        uint8_t l_197 = 0x75L;
        VECTOR(int32_t, 16) l_200 = (VECTOR(int32_t, 16))((-1L), (VECTOR(int32_t, 4))((-1L), (VECTOR(int32_t, 2))((-1L), (-2L)), (-2L)), (-2L), (-1L), (-2L), (VECTOR(int32_t, 2))((-1L), (-2L)), (VECTOR(int32_t, 2))((-1L), (-2L)), (-1L), (-2L), (-1L), (-2L));
        struct S0 l_201[2] = {{18446744073709551615UL,0x5A28886CC78ED14CL,0UL,0L,0UL,0x5CL,9UL,4L,1L,5UL},{18446744073709551615UL,0x5A28886CC78ED14CL,0UL,0L,0UL,0x5CL,9UL,4L,1L,5UL}};
        struct S0 l_202[1][4] = {{{0x65150DD777C95533L,0x5BCBC91AEC19C680L,65535UL,0L,4294967286UL,246UL,0xC8F22753L,-1L,0x0EB8ACBBL,8UL},{0x65150DD777C95533L,0x5BCBC91AEC19C680L,65535UL,0L,4294967286UL,246UL,0xC8F22753L,-1L,0x0EB8ACBBL,8UL},{0x65150DD777C95533L,0x5BCBC91AEC19C680L,65535UL,0L,4294967286UL,246UL,0xC8F22753L,-1L,0x0EB8ACBBL,8UL},{0x65150DD777C95533L,0x5BCBC91AEC19C680L,65535UL,0L,4294967286UL,246UL,0xC8F22753L,-1L,0x0EB8ACBBL,8UL}}};
        int8_t l_203[10] = {1L,1L,1L,1L,1L,1L,1L,1L,1L,1L};
        int i, j;
        ++l_197;
        l_202[0][2] = ((((VECTOR(int32_t, 4))(1L, ((VECTOR(int32_t, 2))(((VECTOR(int32_t, 8))(l_200.s0ad8a633)).s47)), (-1L))).x , (((VECTOR(uint8_t, 2))(0UL, 251UL)).even , 6UL)) , l_201[0]);
        l_203[6] = ((VECTOR(int32_t, 2))(((VECTOR(int32_t, 8))(clz(((VECTOR(int32_t, 2))(0x61A9F098L, 0x52432C4BL)).yxxyxxyy))).s74)).hi;
        for (l_201[0].f7 = 11; (l_201[0].f7 == (-7)); l_201[0].f7 = safe_sub_func_int64_t_s_s(l_201[0].f7, 7))
        { /* block id: 70 */
            int32_t l_206 = (-3L);
            for (l_206 = 0; (l_206 < 20); l_206 = safe_add_func_uint16_t_u_u(l_206, 3))
            { /* block id: 73 */
                int32_t l_209 = 0x4915B41EL;
                int32_t *l_277 = &l_209;
                int32_t *l_278 = &l_209;
                uint8_t l_279 = 246UL;
                if (l_209)
                { /* block id: 74 */
                    VECTOR(int8_t, 4) l_210 = (VECTOR(int8_t, 4))(1L, (VECTOR(int8_t, 2))(1L, 0x58L), 0x58L);
                    int8_t l_211 = 0x5EL;
                    VECTOR(int32_t, 16) l_212 = (VECTOR(int32_t, 16))(6L, (VECTOR(int32_t, 4))(6L, (VECTOR(int32_t, 2))(6L, 0x2EBE9915L), 0x2EBE9915L), 0x2EBE9915L, 6L, 0x2EBE9915L, (VECTOR(int32_t, 2))(6L, 0x2EBE9915L), (VECTOR(int32_t, 2))(6L, 0x2EBE9915L), 6L, 0x2EBE9915L, 6L, 0x2EBE9915L);
                    VECTOR(uint64_t, 2) l_213 = (VECTOR(uint64_t, 2))(18446744073709551607UL, 0xD301FC7AE0A9D3A4L);
                    VECTOR(uint64_t, 8) l_214 = (VECTOR(uint64_t, 8))(0x4D248D75DF0EC7BDL, (VECTOR(uint64_t, 4))(0x4D248D75DF0EC7BDL, (VECTOR(uint64_t, 2))(0x4D248D75DF0EC7BDL, 9UL), 9UL), 9UL, 0x4D248D75DF0EC7BDL, 9UL);
                    VECTOR(uint64_t, 4) l_215 = (VECTOR(uint64_t, 4))(18446744073709551615UL, (VECTOR(uint64_t, 2))(18446744073709551615UL, 0x2F41D32856212C04L), 0x2F41D32856212C04L);
                    int32_t l_216 = 0x785065BEL;
                    VECTOR(uint64_t, 8) l_217 = (VECTOR(uint64_t, 8))(0xF6C5CB491CE318A9L, (VECTOR(uint64_t, 4))(0xF6C5CB491CE318A9L, (VECTOR(uint64_t, 2))(0xF6C5CB491CE318A9L, 1UL), 1UL), 1UL, 0xF6C5CB491CE318A9L, 1UL);
                    VECTOR(uint64_t, 4) l_218 = (VECTOR(uint64_t, 4))(0xA6FD3F7A21F05741L, (VECTOR(uint64_t, 2))(0xA6FD3F7A21F05741L, 18446744073709551610UL), 18446744073709551610UL);
                    VECTOR(int8_t, 2) l_219 = (VECTOR(int8_t, 2))(0L, 5L);
                    uint64_t l_220 = 0x6CE0CBFE1FFC19A0L;
                    uint32_t l_221 = 6UL;
                    int32_t l_222 = 0x2EF967D0L;
                    int8_t l_223 = 0x58L;
                    int32_t l_224 = 0x08A9C564L;
                    int i;
                    l_209 &= ((((VECTOR(int8_t, 16))(l_210.ywxyzzwxzyxxzyxy)).sa , ((l_211 , (-8L)) , ((VECTOR(int32_t, 16))(l_212.sf671c7e49223293a)).s4)) , (((VECTOR(uint64_t, 16))(18446744073709551608UL, ((VECTOR(uint64_t, 4))(18446744073709551615UL, (l_202[0][2].f1 = 0xE911EC70156CE7B1L), 0UL, 18446744073709551615UL)), ((VECTOR(uint64_t, 2))(l_213.yy)), ((VECTOR(uint64_t, 4))(rhadd(((VECTOR(uint64_t, 4))((l_221 = ((VECTOR(uint64_t, 8))(hadd(((VECTOR(uint64_t, 8))(((VECTOR(uint64_t, 16))(safe_clamp_func(VECTOR(uint64_t, 16),VECTOR(uint64_t, 16),((VECTOR(uint64_t, 4))(l_214.s0741)).ywzzwwzxzzxyyzzz, ((VECTOR(uint64_t, 4))(l_215.yzzz)).zzwxwxwywwzxwzww, ((VECTOR(uint64_t, 2))(((VECTOR(uint64_t, 4))(((VECTOR(uint64_t, 2))(((VECTOR(uint64_t, 4))((l_201[0].f1 = (l_202[0][2].f1 ^= l_216)), ((VECTOR(uint64_t, 2))(((VECTOR(uint64_t, 4))(clz(((VECTOR(uint64_t, 4))(GROUP_DIVERGE(2, 1), 0x930764D266B7CBA8L, 0x6190955ED37AC70BL, 0xFEE10322254527A5L))))).odd)), 1UL)).even)).yxxy)).odd)).xyxxxxyxyyxyxyxy))).lo)), ((VECTOR(uint64_t, 4))(add_sat(((VECTOR(uint64_t, 16))(sub_sat(((VECTOR(uint64_t, 8))(safe_clamp_func(VECTOR(uint64_t, 8),VECTOR(uint64_t, 8),((VECTOR(uint64_t, 4))(mad_sat(((VECTOR(uint64_t, 4))(abs(((VECTOR(uint64_t, 8))(mad_sat(((VECTOR(uint64_t, 8))(max(((VECTOR(uint64_t, 8))(l_217.s24422565)), ((VECTOR(uint64_t, 16))(((VECTOR(uint64_t, 2))(((VECTOR(uint64_t, 4))(18446744073709551608UL, 0UL, 18446744073709551611UL, 1UL)).even)).xxyxyyyxyyyyyxyx)).lo))), ((VECTOR(uint64_t, 4))(((VECTOR(uint64_t, 8))(max(((VECTOR(uint64_t, 2))(l_218.zw)).xxyxxxxx, (uint64_t)(((VECTOR(int8_t, 8))(((VECTOR(int8_t, 16))(sub_sat(((VECTOR(int8_t, 8))(0x26L, ((VECTOR(int8_t, 2))(l_219.xx)), 0x66L, 0x56L, (l_203[6] |= ((VECTOR(int8_t, 4))(0x5CL, 0x2FL, 0L, 0x03L)).x), 0L, 0x51L)).s4171416222641767, ((VECTOR(int8_t, 16))((-6L)))))).hi)).s5 , l_220)))).even)).xwyxyzxz, ((VECTOR(uint64_t, 8))(18446744073709551612UL))))).lo))), ((VECTOR(uint64_t, 4))(0x7407D1827CA51E5DL)), ((VECTOR(uint64_t, 4))(18446744073709551615UL))))).wxxyyxxx, ((VECTOR(uint64_t, 8))(0xDED637181D824BCEL)), ((VECTOR(uint64_t, 8))(0UL))))).s7331745156342374, ((VECTOR(uint64_t, 16))(18446744073709551608UL))))).s04e8, ((VECTOR(uint64_t, 4))(9UL))))).wxwzywww))).s6), l_222, 0xB035E9072B6661C0L, 18446744073709551610UL)), ((VECTOR(uint64_t, 4))(18446744073709551608UL))))), l_223, ((VECTOR(uint64_t, 4))(1UL)))).s6 , l_224));
                }
                else
                { /* block id: 81 */
                    int16_t l_225 = 6L;
                    VECTOR(uint64_t, 8) l_226 = (VECTOR(uint64_t, 8))(0x0A8BBBD35DCD7E55L, (VECTOR(uint64_t, 4))(0x0A8BBBD35DCD7E55L, (VECTOR(uint64_t, 2))(0x0A8BBBD35DCD7E55L, 18446744073709551615UL), 18446744073709551615UL), 18446744073709551615UL, 0x0A8BBBD35DCD7E55L, 18446744073709551615UL);
                    uint16_t l_227 = 0xB06BL;
                    VECTOR(int8_t, 8) l_228 = (VECTOR(int8_t, 8))(0x5AL, (VECTOR(int8_t, 4))(0x5AL, (VECTOR(int8_t, 2))(0x5AL, (-5L)), (-5L)), (-5L), 0x5AL, (-5L));
                    VECTOR(int8_t, 16) l_229 = (VECTOR(int8_t, 16))(1L, (VECTOR(int8_t, 4))(1L, (VECTOR(int8_t, 2))(1L, (-1L)), (-1L)), (-1L), 1L, (-1L), (VECTOR(int8_t, 2))(1L, (-1L)), (VECTOR(int8_t, 2))(1L, (-1L)), 1L, (-1L), 1L, (-1L));
                    VECTOR(int8_t, 8) l_230 = (VECTOR(int8_t, 8))(0x19L, (VECTOR(int8_t, 4))(0x19L, (VECTOR(int8_t, 2))(0x19L, 0x55L), 0x55L), 0x55L, 0x19L, 0x55L);
                    VECTOR(int8_t, 2) l_231 = (VECTOR(int8_t, 2))((-1L), 0x58L);
                    uint64_t l_232 = 0xC055C2ACDC9DE390L;
                    int64_t l_233 = 0x35EB201C3AF0021FL;
                    VECTOR(int8_t, 16) l_234 = (VECTOR(int8_t, 16))(0x32L, (VECTOR(int8_t, 4))(0x32L, (VECTOR(int8_t, 2))(0x32L, 0x47L), 0x47L), 0x47L, 0x32L, 0x47L, (VECTOR(int8_t, 2))(0x32L, 0x47L), (VECTOR(int8_t, 2))(0x32L, 0x47L), 0x32L, 0x47L, 0x32L, 0x47L);
                    VECTOR(int8_t, 2) l_235 = (VECTOR(int8_t, 2))(0x6AL, 0x23L);
                    uint8_t l_236[6];
                    VECTOR(int8_t, 8) l_237 = (VECTOR(int8_t, 8))(0x77L, (VECTOR(int8_t, 4))(0x77L, (VECTOR(int8_t, 2))(0x77L, 0L), 0L), 0L, 0x77L, 0L);
                    VECTOR(int8_t, 4) l_238 = (VECTOR(int8_t, 4))(6L, (VECTOR(int8_t, 2))(6L, (-5L)), (-5L));
                    VECTOR(int8_t, 4) l_239 = (VECTOR(int8_t, 4))((-3L), (VECTOR(int8_t, 2))((-3L), 0x45L), 0x45L);
                    VECTOR(int8_t, 16) l_240 = (VECTOR(int8_t, 16))(0x30L, (VECTOR(int8_t, 4))(0x30L, (VECTOR(int8_t, 2))(0x30L, 0x68L), 0x68L), 0x68L, 0x30L, 0x68L, (VECTOR(int8_t, 2))(0x30L, 0x68L), (VECTOR(int8_t, 2))(0x30L, 0x68L), 0x30L, 0x68L, 0x30L, 0x68L);
                    int32_t l_241 = 1L;
                    struct S0 *l_242 = (void*)0;
                    struct S0 l_244[6][4][10] = {{{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}}},{{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}}},{{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}}},{{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}}},{{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}}},{{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}},{{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{1UL,0UL,65535UL,0L,0xE88AB914L,0x10L,1UL,0L,0x6A68FB3AL,0xDD4B255DL},{18446744073709551615UL,0x5E7F8203314886F2L,0UL,0x2851C55BL,4294967287UL,0UL,0UL,0x504C78BEDDD3C23FL,0x4509C4B1L,0x61ABF1F3L},{0xF7961D5FEAE2BD94L,0UL,65535UL,0x48185F2EL,0x462DA258L,0x74L,1UL,0x236EAC91F2D1C088L,0x641B2DF1L,0x81D6DDEBL},{5UL,5UL,0x8BA5L,-3L,0x42AAD9C1L,255UL,9UL,7L,0x7D920499L,9UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0x9007965F1F261F9EL,18446744073709551614UL,0xF224L,0x14233238L,4294967286UL,0UL,0x6C30C0CBL,-1L,0x66F8FEA2L,0xEB2C7159L},{0xC703E0CC880848E3L,0x9AFF7FA8EDC44DF0L,65535UL,0x06C5D22DL,7UL,0xD8L,0x0E184D98L,0x4BC42C78304BA9E8L,0x3BFDB6B1L,0UL},{0xA74ED6389AE824EBL,0x33E6FB5C3FB84D6BL,0x067BL,0x2E65E62DL,0UL,0UL,0xF81B2D6CL,-6L,-4L,0x25348D20L}}}};
                    struct S0 *l_243[4] = {&l_244[1][2][6],&l_244[1][2][6],&l_244[1][2][6],&l_244[1][2][6]};
                    uint32_t l_245 = 4294967290UL;
                    int32_t *l_275[5] = {(void*)0,(void*)0,(void*)0,(void*)0,(void*)0};
                    int32_t *l_276 = (void*)0;
                    int i, j, k;
                    for (i = 0; i < 6; i++)
                        l_236[i] = 0xB4L;
                    l_243[2] = ((((VECTOR(int8_t, 16))((l_203[6] = l_225), (l_203[6] |= (((VECTOR(uint64_t, 8))(((VECTOR(uint64_t, 4))(((VECTOR(uint64_t, 2))(((VECTOR(uint64_t, 4))(((VECTOR(uint64_t, 8))(0x0F97E79E6F677C72L, ((VECTOR(uint64_t, 4))(l_226.s3532)), l_227, 0x8DDEED181C57303BL, 0x750E798DF2CFDF21L)).even)).odd)), 1UL, 0xC09BFC39C174052BL)), 0x0A2A55C7A1802248L, 18446744073709551611UL, 18446744073709551612UL, 0x76B4536F9A5C36C7L)).s5 , 4L)), 0x7AL, ((VECTOR(int8_t, 4))(rotate(((VECTOR(int8_t, 16))(((VECTOR(int8_t, 16))(l_228.s6512204120304240)))).sc7d5, ((VECTOR(int8_t, 8))(((VECTOR(int8_t, 2))(0x53L, 0x75L)), 0x20L, ((VECTOR(int8_t, 4))(((VECTOR(int8_t, 4))(0x3FL, ((VECTOR(int8_t, 4))(((VECTOR(int8_t, 2))(sub_sat(((VECTOR(int8_t, 2))(sub_sat(((VECTOR(int8_t, 2))(l_229.sae)), ((VECTOR(int8_t, 16))(0x7CL, 2L, ((VECTOR(int8_t, 2))(((VECTOR(int8_t, 2))(l_230.s56)))), 0L, ((VECTOR(int8_t, 8))(l_231.yxxyyxyx)), 0x33L, 0x46L, 7L)).s62))), ((VECTOR(int8_t, 16))(l_232, l_233, 0x67L, 0x29L, 0L, ((VECTOR(int8_t, 4))(clz(((VECTOR(int8_t, 8))(sub_sat(((VECTOR(int8_t, 2))(((VECTOR(int8_t, 2))(0L, 0x1EL)))).xyxyyxxy, ((VECTOR(int8_t, 4))(l_234.se0e8)).xwzzzwyy))).even))), ((VECTOR(int8_t, 4))(rotate(((VECTOR(int8_t, 2))(hadd(((VECTOR(int8_t, 8))(((VECTOR(int8_t, 2))((-1L), 0x48L)), ((VECTOR(int8_t, 2))(l_235.xy)), 0L, ((l_201[0].f5 = l_236[4]) , (l_203[6] = ((VECTOR(int8_t, 8))(l_237.s07354370)).s2)), 0L, 1L)).s05, ((VECTOR(int8_t, 8))(((VECTOR(int8_t, 8))(l_238.xyzwwyzw)))).s22))).xyyy, ((VECTOR(int8_t, 4))(add_sat(((VECTOR(int8_t, 4))(l_239.yzzz)), ((VECTOR(int8_t, 8))(l_240.sd22055ae)).odd)))))), (-1L), 2L, 0x60L)).s78))), 0L, 1L)).z, 0x26L, (-1L))).w, 0x42L, 0x08L, (-1L))), (-1L))).even))), (-9L), 0x34L, (-1L), 0x31L, 9L, 0x1DL, 0x6BL, (-3L), 0L)).s1 , l_241) , l_242);
                    if (l_245)
                    { /* block id: 87 */
                        int32_t **l_246 = (void*)0;
                        int32_t *l_247 = (void*)0;
                        int32_t l_249[1];
                        int32_t *l_248 = &l_249[0];
                        int i;
                        for (i = 0; i < 1; i++)
                            l_249[i] = (-1L);
                        l_246 = (void*)0;
                        l_248 = l_247;
                    }
                    else
                    { /* block id: 90 */
                        int32_t l_250 = (-6L);
                        uint32_t l_251 = 0xBB163F8EL;
                        VECTOR(int32_t, 16) l_254 = (VECTOR(int32_t, 16))(1L, (VECTOR(int32_t, 4))(1L, (VECTOR(int32_t, 2))(1L, 0x33D3B8DDL), 0x33D3B8DDL), 0x33D3B8DDL, 1L, 0x33D3B8DDL, (VECTOR(int32_t, 2))(1L, 0x33D3B8DDL), (VECTOR(int32_t, 2))(1L, 0x33D3B8DDL), 1L, 0x33D3B8DDL, 1L, 0x33D3B8DDL);
                        VECTOR(int32_t, 8) l_255 = (VECTOR(int32_t, 8))(0x664523FCL, (VECTOR(int32_t, 4))(0x664523FCL, (VECTOR(int32_t, 2))(0x664523FCL, (-1L)), (-1L)), (-1L), 0x664523FCL, (-1L));
                        VECTOR(int32_t, 8) l_256 = (VECTOR(int32_t, 8))(1L, (VECTOR(int32_t, 4))(1L, (VECTOR(int32_t, 2))(1L, 0x0DAC64B3L), 0x0DAC64B3L), 0x0DAC64B3L, 1L, 0x0DAC64B3L);
                        VECTOR(int32_t, 16) l_257 = (VECTOR(int32_t, 16))(0x4A15794BL, (VECTOR(int32_t, 4))(0x4A15794BL, (VECTOR(int32_t, 2))(0x4A15794BL, 0x2DA47013L), 0x2DA47013L), 0x2DA47013L, 0x4A15794BL, 0x2DA47013L, (VECTOR(int32_t, 2))(0x4A15794BL, 0x2DA47013L), (VECTOR(int32_t, 2))(0x4A15794BL, 0x2DA47013L), 0x4A15794BL, 0x2DA47013L, 0x4A15794BL, 0x2DA47013L);
                        uint64_t l_258 = 1UL;
                        VECTOR(int16_t, 16) l_259 = (VECTOR(int16_t, 16))(0x0B7AL, (VECTOR(int16_t, 4))(0x0B7AL, (VECTOR(int16_t, 2))(0x0B7AL, 0x2CC8L), 0x2CC8L), 0x2CC8L, 0x0B7AL, 0x2CC8L, (VECTOR(int16_t, 2))(0x0B7AL, 0x2CC8L), (VECTOR(int16_t, 2))(0x0B7AL, 0x2CC8L), 0x0B7AL, 0x2CC8L, 0x0B7AL, 0x2CC8L);
                        VECTOR(int16_t, 8) l_260 = (VECTOR(int16_t, 8))(0x6718L, (VECTOR(int16_t, 4))(0x6718L, (VECTOR(int16_t, 2))(0x6718L, 0L), 0L), 0L, 0x6718L, 0L);
                        VECTOR(int32_t, 16) l_261 = (VECTOR(int32_t, 16))(0x0CEEC07CL, (VECTOR(int32_t, 4))(0x0CEEC07CL, (VECTOR(int32_t, 2))(0x0CEEC07CL, 0x5AFABD3AL), 0x5AFABD3AL), 0x5AFABD3AL, 0x0CEEC07CL, 0x5AFABD3AL, (VECTOR(int32_t, 2))(0x0CEEC07CL, 0x5AFABD3AL), (VECTOR(int32_t, 2))(0x0CEEC07CL, 0x5AFABD3AL), 0x0CEEC07CL, 0x5AFABD3AL, 0x0CEEC07CL, 0x5AFABD3AL);
                        uint16_t l_262 = 1UL;
                        uint16_t l_263 = 65535UL;
                        VECTOR(int32_t, 16) l_264 = (VECTOR(int32_t, 16))((-1L), (VECTOR(int32_t, 4))((-1L), (VECTOR(int32_t, 2))((-1L), 1L), 1L), 1L, (-1L), 1L, (VECTOR(int32_t, 2))((-1L), 1L), (VECTOR(int32_t, 2))((-1L), 1L), (-1L), 1L, (-1L), 1L);
                        VECTOR(int32_t, 4) l_265 = (VECTOR(int32_t, 4))(0x1556DF89L, (VECTOR(int32_t, 2))(0x1556DF89L, (-9L)), (-9L));
                        uint64_t l_266 = 18446744073709551615UL;
                        int32_t l_267 = 0x57DF5F34L;
                        uint32_t l_268 = 0UL;
                        int32_t l_269 = (-2L);
                        int8_t l_270 = (-8L);
                        uint32_t l_271 = 0x852B7D59L;
                        uint32_t l_274 = 0x1112032AL;
                        int i;
                        l_251++;
                        l_257.s0 = ((VECTOR(int32_t, 16))(((VECTOR(int32_t, 4))(max(((VECTOR(int32_t, 8))(max(((VECTOR(int32_t, 8))(rhadd(((VECTOR(int32_t, 8))(l_254.s7bcb3d7c)), ((VECTOR(int32_t, 8))(((VECTOR(int32_t, 2))(((VECTOR(int32_t, 4))(((VECTOR(int32_t, 2))(l_255.s35)), 0x12B1983AL, 0x4ACAA19CL)).even)).yyyyyxyx))))), ((VECTOR(int32_t, 8))(mad_sat(((VECTOR(int32_t, 16))(((VECTOR(int32_t, 8))(l_256.s35335050)), ((VECTOR(int32_t, 8))(l_257.s5b049759)).s3, l_258, ((VECTOR(int32_t, 4))(0x5E31D447L, (l_194 = ((VECTOR(int32_t, 2))(upsample(((VECTOR(int16_t, 8))(mul_hi(((VECTOR(int16_t, 16))(((VECTOR(int16_t, 16))(l_259.s9c15bfe9b3adbfb1)))).hi, ((VECTOR(int16_t, 2))(l_260.s51)).yxxyxyyx))).s77, ((VECTOR(uint16_t, 4))(0UL, (l_244[1][2][6].f2 ^= 1UL), 0UL, 0x165CL)).even))).lo), 0x6B508783L, 1L)), 1L, 0x08BCF91DL)).odd, ((VECTOR(int32_t, 16))(l_261.se0651530b3b7a195)).odd, ((VECTOR(int32_t, 4))(((VECTOR(int32_t, 8))(((VECTOR(int32_t, 2))(((VECTOR(int32_t, 4))(safe_mul24_func_int32_t_s_s(VECTOR(int32_t, 4),((VECTOR(int32_t, 4))((l_195 &= (l_262 , ((l_225 &= l_263) , (l_241 = 0L)))), 0x4970AC85L, 0L, 0x57B14EEFL)), ((VECTOR(int32_t, 2))(l_264.s82)).yyyy))).odd)), ((VECTOR(int32_t, 2))(l_265.zw)), ((VECTOR(int32_t, 4))(((VECTOR(int32_t, 2))(((VECTOR(int32_t, 16))((l_209 &= 0x3C1B1E77L), l_266, (l_195 = 0x752C6664L), 0L, l_267, l_268, 0x0AA558F3L, ((VECTOR(int32_t, 4))(6L)), ((VECTOR(int32_t, 2))(3L)), (-1L), 0x2C16843CL, 0x3AD6472FL)).s11)).yyxy)))).hi)).zyzzyywx)))))).lo, ((VECTOR(int32_t, 4))(5L))))).wxwxxwwwwxywwxww)).sc;
                        ++l_271;
                        l_195 = (l_194 = l_274);
                    }
                    l_276 = l_275[3];
                }
                l_278 = l_277;
                if (l_279)
                { /* block id: 107 */
                    int64_t l_280 = 0x57A78D1A17798721L;
                    int32_t l_282 = 0x54C83407L;
                    int32_t *l_281[7] = {&l_282,&l_282,&l_282,&l_282,&l_282,&l_282,&l_282};
                    struct S1 l_283 = {1UL,1L,0xC9B8L,254UL,0x46C513C96B699F29L,-1L};/* VOLATILE GLOBAL l_283 */
                    uint64_t l_284[7] = {1UL,18446744073709551613UL,1UL,1UL,18446744073709551613UL,1UL,1UL};
                    int i;
                    l_278 = (l_277 = (l_280 , l_281[2]));
                    l_209 ^= (l_194 = (l_283 , l_284[6]));
                    for (l_283.f4 = 0; (l_283.f4 > 55); l_283.f4 = safe_add_func_int32_t_s_s(l_283.f4, 1))
                    { /* block id: 114 */
                        uint32_t l_287 = 0x780F7D8CL;
                        VECTOR(uint32_t, 8) l_288 = (VECTOR(uint32_t, 8))(4294967293UL, (VECTOR(uint32_t, 4))(4294967293UL, (VECTOR(uint32_t, 2))(4294967293UL, 0UL), 0UL), 0UL, 4294967293UL, 0UL);
                        int16_t l_289 = 1L;
                        uint8_t l_290 = 0xB5L;
                        int i;
                        l_288.s7 = l_287;
                        l_290 |= l_289;
                    }
                }
                else
                { /* block id: 118 */
                    uint32_t l_291 = 0UL;
                    (*l_277) = l_291;
                }
            }
        }
        unsigned int result = 0;
        result += l_194;
        result += l_195;
        result += l_196;
        result += l_197;
        result += l_200.sf;
        result += l_200.se;
        result += l_200.sd;
        result += l_200.sc;
        result += l_200.sb;
        result += l_200.sa;
        result += l_200.s9;
        result += l_200.s8;
        result += l_200.s7;
        result += l_200.s6;
        result += l_200.s5;
        result += l_200.s4;
        result += l_200.s3;
        result += l_200.s2;
        result += l_200.s1;
        result += l_200.s0;
        int l_201_i0;
        for (l_201_i0 = 0; l_201_i0 < 2; l_201_i0++) {
            result += l_201[l_201_i0].f0;
            result += l_201[l_201_i0].f1;
            result += l_201[l_201_i0].f2;
            result += l_201[l_201_i0].f3;
            result += l_201[l_201_i0].f4;
            result += l_201[l_201_i0].f5;
            result += l_201[l_201_i0].f6;
            result += l_201[l_201_i0].f7;
            result += l_201[l_201_i0].f8;
            result += l_201[l_201_i0].f9;
        }
        int l_202_i0, l_202_i1;
        for (l_202_i0 = 0; l_202_i0 < 1; l_202_i0++) {
            for (l_202_i1 = 0; l_202_i1 < 4; l_202_i1++) {
                result += l_202[l_202_i0][l_202_i1].f0;
                result += l_202[l_202_i0][l_202_i1].f1;
                result += l_202[l_202_i0][l_202_i1].f2;
                result += l_202[l_202_i0][l_202_i1].f3;
                result += l_202[l_202_i0][l_202_i1].f4;
                result += l_202[l_202_i0][l_202_i1].f5;
                result += l_202[l_202_i0][l_202_i1].f6;
                result += l_202[l_202_i0][l_202_i1].f7;
                result += l_202[l_202_i0][l_202_i1].f8;
                result += l_202[l_202_i0][l_202_i1].f9;
            }
        }
        int l_203_i0;
        for (l_203_i0 = 0; l_203_i0 < 10; l_203_i0++) {
            result += l_203[l_203_i0];
        }
        atomic_add(&p_683->g_special_values[89 * get_linear_group_id() + 51], result);
    }
    else
    { /* block id: 123 */
        (1 + 1);
    }
    return p_683->g_129[0][1].f3;
}


/* ------------------------------------------ */
/* 
 * reads : p_683->g_131 p_683->g_127.f1 p_683->g_124.f7 p_683->g_139 p_683->g_123.f9 p_683->g_125.f5 p_683->g_129.f2 p_683->g_123.f2 p_683->g_50 p_683->g_122.f9 p_683->g_127.f2 p_683->g_124.f4 p_683->g_2 p_683->g_126.f9 p_683->g_123.f8 p_683->g_124.f5
 * writes: p_683->g_132 p_683->g_127.f1 p_683->g_124.f7 p_683->g_125.f1 p_683->g_123.f2 p_683->g_108.f5 p_683->g_122.f9 p_683->g_118 p_683->g_126.f9 p_683->g_108.f1 p_683->g_157
 */
uint32_t  func_68(int64_t  p_69, struct S0 * p_70, int64_t * p_71, struct S0 * p_72, struct S2 * p_683)
{ /* block id: 25 */
    int16_t l_130 = (-1L);
    struct S0 *l_140 = &p_683->g_123[4];
    uint16_t *l_150 = &p_683->g_123[4].f2;
    int32_t *l_151 = &p_683->g_2;
    int32_t l_168 = 0x478BBDB8L;
    int64_t *l_173 = &p_683->g_118[0];
    uint32_t *l_174 = &p_683->g_126[2][2].f9;
    int32_t *l_181[8][3][2] = {{{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0}},{{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0}},{{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0}},{{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0}},{{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0}},{{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0}},{{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0}},{{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0},{&p_683->g_124.f8,(void*)0}}};
    int32_t *l_186[5];
    int i, j, k;
    for (i = 0; i < 5; i++)
        l_186[i] = &p_683->g_157;
    p_683->g_132 = (l_130 , p_683->g_131);
    for (p_683->g_127.f1 = 0; (p_683->g_127.f1 <= 41); p_683->g_127.f1 = safe_add_func_uint64_t_u_u(p_683->g_127.f1, 7))
    { /* block id: 29 */
        if (p_69)
            break;
    }
    for (p_683->g_124.f7 = 0; (p_683->g_124.f7 >= 5); p_683->g_124.f7 = safe_add_func_int32_t_s_s(p_683->g_124.f7, 2))
    { /* block id: 34 */
        int8_t l_147 = 0x61L;
        uint8_t *l_155[9][1][10] = {{{&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82}},{{&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82}},{{&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82}},{{&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82}},{{&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82}},{{&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82}},{{&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82}},{{&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82}},{{&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82,&p_683->g_108.f3,&p_683->g_82,&p_683->g_82}}};
        int64_t *l_165 = &p_683->g_118[0];
        int i, j, k;
        for (p_683->g_125.f1 = 20; (p_683->g_125.f1 >= 24); ++p_683->g_125.f1)
        { /* block id: 37 */
            struct S0 *l_141 = &p_683->g_122;
            VECTOR(uint16_t, 16) l_146 = (VECTOR(uint16_t, 16))(0x481FL, (VECTOR(uint16_t, 4))(0x481FL, (VECTOR(uint16_t, 2))(0x481FL, 0x59E5L), 0x59E5L), 0x59E5L, 0x481FL, 0x59E5L, (VECTOR(uint16_t, 2))(0x481FL, 0x59E5L), (VECTOR(uint16_t, 2))(0x481FL, 0x59E5L), 0x481FL, 0x59E5L, 0x481FL, 0x59E5L);
            int32_t *l_152 = &p_683->g_2;
            int32_t *l_156[8][3][6] = {{{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2}},{{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2},{&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2,&p_683->g_2}}};
            int64_t *l_164 = &p_683->g_118[0];
            uint32_t *l_166 = (void*)0;
            uint32_t *l_167 = &p_683->g_122.f9;
            int i, j, k;
            p_683->g_108.f5 = ((((*l_150) |= (((l_141 = (l_140 = p_683->g_139)) == (void*)0) < (safe_sub_func_uint8_t_u_u((l_130 , (safe_mul_func_int8_t_s_s(p_683->g_123[4].f9, ((l_147 = ((VECTOR(uint16_t, 16))(l_146.se0e0025c80a1da36)).s6) , (((safe_lshift_func_uint16_t_u_s(((((void*)0 == l_150) <= (l_151 != l_152)) < (safe_lshift_func_uint8_t_u_s(1UL, 2))), p_683->g_125.f5)) , &p_683->g_82) != l_155[6][0][3]))))), p_683->g_129[0][1].f2)))) >= (-1L)) != p_683->g_50);
            if (p_69)
                continue;
            l_168 = (((VECTOR(uint32_t, 16))(1UL, ((p_683->g_131.f5 < (p_69 == (safe_mod_func_uint16_t_u_u(((((safe_mul_func_uint8_t_u_u((((safe_sub_func_int32_t_s_s((-2L), FAKE_DIVERGE(p_683->local_0_offset, get_local_id(0), 10))) , (void*)0) == l_164), (l_165 == &p_683->g_118[0]))) | (((*l_167) &= (l_155[6][0][3] == ((((l_147 , 0x0EB53134L) , (void*)0) == p_71) , l_155[6][0][3]))) | p_683->g_127.f2)) & p_69) , p_683->g_124.f4), p_69)))) , FAKE_DIVERGE(p_683->group_0_offset, get_group_id(0), 10)), FAKE_DIVERGE(p_683->global_2_offset, get_global_id(2), 10), ((VECTOR(uint32_t, 8))(0xD22AC3E5L)), 0x12F1B8ECL, 9UL, ((VECTOR(uint32_t, 2))(4294967295UL)), 0x852D1124L)).s3 , p_69);
        }
        if (p_69)
            continue;
        return (*l_151);
    }
    p_683->g_157 = (((*l_151) && ((safe_mul_func_int8_t_s_s(((*p_71) , (((*l_173) = p_69) > (((++(*l_174)) && ((p_683->g_108.f1 = (safe_rshift_func_uint16_t_u_s((safe_mul_func_int32_t_s_s(p_683->g_124.f4, (p_683->g_123[4].f8 >= p_683->g_124.f5))), 1))) , (safe_add_func_uint8_t_u_u(((safe_add_func_int64_t_s_s((((*p_71) , 0x89L) == ((void*)0 == l_150)), GROUP_DIVERGE(2, 1))) & p_69), 1UL)))) || 0x331CL))), (*l_151))) != p_69)) & 0x2FF69AB2L);
    return (*l_151);
}


/* ------------------------------------------ */
/* 
 * reads : p_683->g_99 p_683->g_38 p_683->g_108 p_683->g_91
 * writes: p_683->g_91 p_683->g_99 p_683->g_118 p_683->g_108
 */
uint16_t  func_73(int64_t  p_74, int64_t * p_75, uint32_t  p_76, int64_t * p_77, uint32_t  p_78, struct S2 * p_683)
{ /* block id: 16 */
    uint32_t l_84 = 0x53C27CC0L;
    uint8_t *l_85[6] = {&p_683->g_82,&p_683->g_82,&p_683->g_82,&p_683->g_82,&p_683->g_82,&p_683->g_82};
    int32_t l_86 = 0x009A6D6CL;
    uint8_t l_87 = 0x98L;
    int32_t *l_90[3];
    uint16_t *l_98[6];
    int32_t **l_109 = &l_90[2];
    int32_t *l_116 = &l_86;
    int64_t *l_117 = &p_683->g_118[0];
    struct S1 *l_119 = &p_683->g_108;
    int i;
    for (i = 0; i < 3; i++)
        l_90[i] = (void*)0;
    for (i = 0; i < 6; i++)
        l_98[i] = &p_683->g_99;
    p_683->g_91 = (l_84 & (++l_87));
    (*l_119) = ((safe_lshift_func_int8_t_s_s((safe_mod_func_int16_t_s_s((safe_mul_func_int8_t_s_s(((void*)0 != &p_683->g_57), ((++p_683->g_99) <= (p_683->g_38.sd <= ((*l_117) = (((*l_116) = (safe_div_func_uint64_t_u_u((safe_sub_func_uint16_t_u_u(0x7C6DL, (safe_sub_func_int64_t_s_s((((*l_109) = (p_683->g_108 , &l_86)) == &l_86), (((((safe_lshift_func_uint8_t_u_s((safe_lshift_func_int16_t_s_u(((safe_add_func_uint8_t_u_u(FAKE_DIVERGE(p_683->group_1_offset, get_group_id(1), 10), p_683->g_91)) || FAKE_DIVERGE(p_683->local_1_offset, get_local_id(1), 10)), 13)), 7)) , &p_683->g_50) != (void*)0) | 0x5D5259FC79B81428L) , p_76))))), GROUP_DIVERGE(2, 1)))) != 4294967288UL)))))), p_78)), p_683->g_38.s3)) , p_683->g_108);
    return p_683->g_91;
}


__kernel void entry(__global ulong *result, __global volatile uint *g_atomic_input, __global volatile uint *g_special_values, __global volatile int *g_atomic_reduction, __global int *sequence_input, __global long *g_comm_values) {
    int i, j;
    __local volatile uint32_t l_atomic_reduction[1];
    if (get_linear_local_id() == 0)
        for (i = 0; i < 1; i++)
            l_atomic_reduction[i] = 0;
    __local int64_t l_comm_values[215];
    if (get_linear_local_id() == 0)
        for (i = 0; i < 215; i++)
            l_comm_values[i] = 1;
    struct S2 c_684;
    struct S2* p_683 = &c_684;
    struct S2 c_685 = {
        0L, // p_683->g_2
        (VECTOR(int64_t, 4))(0x186E3E45BBBDEBF8L, (VECTOR(int64_t, 2))(0x186E3E45BBBDEBF8L, 1L), 1L), // p_683->g_18
        (-1L), // p_683->g_30
        (VECTOR(int16_t, 16))(7L, (VECTOR(int16_t, 4))(7L, (VECTOR(int16_t, 2))(7L, (-1L)), (-1L)), (-1L), 7L, (-1L), (VECTOR(int16_t, 2))(7L, (-1L)), (VECTOR(int16_t, 2))(7L, (-1L)), 7L, (-1L), 7L, (-1L)), // p_683->g_38
        0x6FD6E511AFD208DDL, // p_683->g_50
        {0xD584D75F053D0C96L,0xB5AD8EDCE5F1497EL,65535UL,0x24E19C78L,0x9AFCA6F7L,1UL,1UL,1L,1L,0x9B9878FFL}, // p_683->g_57
        255UL, // p_683->g_82
        0x6CBDL, // p_683->g_91
        65535UL, // p_683->g_99
        {0UL,6L,0x969CL,1UL,18446744073709551608UL,0x6E1962FFL}, // p_683->g_108
        {0x27750E480CDBF837L,0x27750E480CDBF837L}, // p_683->g_118
        {4UL,0x555874C7D6E71340L,0x92DFL,0x5848C122L,6UL,0xD4L,0xBAF9760DL,1L,0x4B904F0DL,0x0DC829B9L}, // p_683->g_122
        {{18446744073709551615UL,0xC2F3C20DDCAC83E9L,65535UL,0x7B4F1CBCL,4294967288UL,0x4DL,4294967293UL,-9L,0x05ED08B2L,0UL},{0xF11896133E8A8358L,0x8BF5EF5A3C8486E1L,65527UL,0x3545DD45L,5UL,0UL,0UL,0x353FB5FCD5A05CCEL,5L,0x6AEAC40EL},{18446744073709551615UL,0xC2F3C20DDCAC83E9L,65535UL,0x7B4F1CBCL,4294967288UL,0x4DL,4294967293UL,-9L,0x05ED08B2L,0UL},{18446744073709551615UL,0xC2F3C20DDCAC83E9L,65535UL,0x7B4F1CBCL,4294967288UL,0x4DL,4294967293UL,-9L,0x05ED08B2L,0UL},{0xF11896133E8A8358L,0x8BF5EF5A3C8486E1L,65527UL,0x3545DD45L,5UL,0UL,0UL,0x353FB5FCD5A05CCEL,5L,0x6AEAC40EL},{18446744073709551615UL,0xC2F3C20DDCAC83E9L,65535UL,0x7B4F1CBCL,4294967288UL,0x4DL,4294967293UL,-9L,0x05ED08B2L,0UL},{18446744073709551615UL,0xC2F3C20DDCAC83E9L,65535UL,0x7B4F1CBCL,4294967288UL,0x4DL,4294967293UL,-9L,0x05ED08B2L,0UL},{0xF11896133E8A8358L,0x8BF5EF5A3C8486E1L,65527UL,0x3545DD45L,5UL,0UL,0UL,0x353FB5FCD5A05CCEL,5L,0x6AEAC40EL},{18446744073709551615UL,0xC2F3C20DDCAC83E9L,65535UL,0x7B4F1CBCL,4294967288UL,0x4DL,4294967293UL,-9L,0x05ED08B2L,0UL}}, // p_683->g_123
        {0x03ABDF95B3893834L,0x192FD70E6FC06682L,1UL,0x57D2562CL,0UL,1UL,0x678AA32FL,0x0BEF3D604849EAACL,0x28682C8CL,0x6085447BL}, // p_683->g_124
        {0xB2B9B809ED89A753L,0x4A4BF25F1C8C37E7L,3UL,0x30F068E2L,1UL,0x0BL,0x2BF79242L,0L,0x232D690DL,0UL}, // p_683->g_125
        {{{18446744073709551612UL,0xA3CE1FE0044E9B00L,0x7CE1L,0x224A68E6L,0x6C562556L,0xFBL,4294967295UL,-1L,1L,4294967290UL},{18446744073709551615UL,18446744073709551608UL,1UL,-1L,2UL,255UL,4294967295UL,7L,1L,0x3AFA29F6L},{0x4BA7C8BBA856D6ABL,6UL,0x861EL,0x600149B9L,0x3A6F6BFBL,1UL,0x4A610A40L,-7L,1L,0xDC83B1EFL},{0xB1CAC37E68EC69D3L,18446744073709551607UL,0xA595L,0x361A9CCBL,0xD5FB0443L,0x2DL,0xB8A6804FL,-1L,-1L,0x38379FB3L}},{{18446744073709551612UL,0xA3CE1FE0044E9B00L,0x7CE1L,0x224A68E6L,0x6C562556L,0xFBL,4294967295UL,-1L,1L,4294967290UL},{18446744073709551615UL,18446744073709551608UL,1UL,-1L,2UL,255UL,4294967295UL,7L,1L,0x3AFA29F6L},{0x4BA7C8BBA856D6ABL,6UL,0x861EL,0x600149B9L,0x3A6F6BFBL,1UL,0x4A610A40L,-7L,1L,0xDC83B1EFL},{0xB1CAC37E68EC69D3L,18446744073709551607UL,0xA595L,0x361A9CCBL,0xD5FB0443L,0x2DL,0xB8A6804FL,-1L,-1L,0x38379FB3L}},{{18446744073709551612UL,0xA3CE1FE0044E9B00L,0x7CE1L,0x224A68E6L,0x6C562556L,0xFBL,4294967295UL,-1L,1L,4294967290UL},{18446744073709551615UL,18446744073709551608UL,1UL,-1L,2UL,255UL,4294967295UL,7L,1L,0x3AFA29F6L},{0x4BA7C8BBA856D6ABL,6UL,0x861EL,0x600149B9L,0x3A6F6BFBL,1UL,0x4A610A40L,-7L,1L,0xDC83B1EFL},{0xB1CAC37E68EC69D3L,18446744073709551607UL,0xA595L,0x361A9CCBL,0xD5FB0443L,0x2DL,0xB8A6804FL,-1L,-1L,0x38379FB3L}},{{18446744073709551612UL,0xA3CE1FE0044E9B00L,0x7CE1L,0x224A68E6L,0x6C562556L,0xFBL,4294967295UL,-1L,1L,4294967290UL},{18446744073709551615UL,18446744073709551608UL,1UL,-1L,2UL,255UL,4294967295UL,7L,1L,0x3AFA29F6L},{0x4BA7C8BBA856D6ABL,6UL,0x861EL,0x600149B9L,0x3A6F6BFBL,1UL,0x4A610A40L,-7L,1L,0xDC83B1EFL},{0xB1CAC37E68EC69D3L,18446744073709551607UL,0xA595L,0x361A9CCBL,0xD5FB0443L,0x2DL,0xB8A6804FL,-1L,-1L,0x38379FB3L}},{{18446744073709551612UL,0xA3CE1FE0044E9B00L,0x7CE1L,0x224A68E6L,0x6C562556L,0xFBL,4294967295UL,-1L,1L,4294967290UL},{18446744073709551615UL,18446744073709551608UL,1UL,-1L,2UL,255UL,4294967295UL,7L,1L,0x3AFA29F6L},{0x4BA7C8BBA856D6ABL,6UL,0x861EL,0x600149B9L,0x3A6F6BFBL,1UL,0x4A610A40L,-7L,1L,0xDC83B1EFL},{0xB1CAC37E68EC69D3L,18446744073709551607UL,0xA595L,0x361A9CCBL,0xD5FB0443L,0x2DL,0xB8A6804FL,-1L,-1L,0x38379FB3L}},{{18446744073709551612UL,0xA3CE1FE0044E9B00L,0x7CE1L,0x224A68E6L,0x6C562556L,0xFBL,4294967295UL,-1L,1L,4294967290UL},{18446744073709551615UL,18446744073709551608UL,1UL,-1L,2UL,255UL,4294967295UL,7L,1L,0x3AFA29F6L},{0x4BA7C8BBA856D6ABL,6UL,0x861EL,0x600149B9L,0x3A6F6BFBL,1UL,0x4A610A40L,-7L,1L,0xDC83B1EFL},{0xB1CAC37E68EC69D3L,18446744073709551607UL,0xA595L,0x361A9CCBL,0xD5FB0443L,0x2DL,0xB8A6804FL,-1L,-1L,0x38379FB3L}},{{18446744073709551612UL,0xA3CE1FE0044E9B00L,0x7CE1L,0x224A68E6L,0x6C562556L,0xFBL,4294967295UL,-1L,1L,4294967290UL},{18446744073709551615UL,18446744073709551608UL,1UL,-1L,2UL,255UL,4294967295UL,7L,1L,0x3AFA29F6L},{0x4BA7C8BBA856D6ABL,6UL,0x861EL,0x600149B9L,0x3A6F6BFBL,1UL,0x4A610A40L,-7L,1L,0xDC83B1EFL},{0xB1CAC37E68EC69D3L,18446744073709551607UL,0xA595L,0x361A9CCBL,0xD5FB0443L,0x2DL,0xB8A6804FL,-1L,-1L,0x38379FB3L}},{{18446744073709551612UL,0xA3CE1FE0044E9B00L,0x7CE1L,0x224A68E6L,0x6C562556L,0xFBL,4294967295UL,-1L,1L,4294967290UL},{18446744073709551615UL,18446744073709551608UL,1UL,-1L,2UL,255UL,4294967295UL,7L,1L,0x3AFA29F6L},{0x4BA7C8BBA856D6ABL,6UL,0x861EL,0x600149B9L,0x3A6F6BFBL,1UL,0x4A610A40L,-7L,1L,0xDC83B1EFL},{0xB1CAC37E68EC69D3L,18446744073709551607UL,0xA595L,0x361A9CCBL,0xD5FB0443L,0x2DL,0xB8A6804FL,-1L,-1L,0x38379FB3L}}}, // p_683->g_126
        {1UL,3UL,0x8766L,0x58ACBC52L,0x4FCE7EEAL,0xCBL,4294967293UL,0x5D841F73C2BB4E88L,0x3110550BL,1UL}, // p_683->g_127
        {{&p_683->g_126[2][2],&p_683->g_124,&p_683->g_126[2][2],&p_683->g_126[2][2],&p_683->g_124,&p_683->g_126[2][2],&p_683->g_126[2][2],&p_683->g_124},{&p_683->g_126[2][2],&p_683->g_124,&p_683->g_126[2][2],&p_683->g_126[2][2],&p_683->g_124,&p_683->g_126[2][2],&p_683->g_126[2][2],&p_683->g_124},{&p_683->g_126[2][2],&p_683->g_124,&p_683->g_126[2][2],&p_683->g_126[2][2],&p_683->g_124,&p_683->g_126[2][2],&p_683->g_126[2][2],&p_683->g_124}}, // p_683->g_121
        {{{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL},{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL}},{{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL},{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL}},{{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL},{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL}},{{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL},{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL}},{{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL},{0xCAC547049EDBDCEAL,0xF6060BA4DF932BF6L,0x4599L,-3L,0UL,0UL,0x6837CBF3L,0x5CCD6D889F70B1BDL,-7L,1UL}}}, // p_683->g_129
        {0UL,1L,65535UL,249UL,0x50535987D7C541B5L,0x15B12106L}, // p_683->g_131
        {0xC54B2A35L,0x025D35F0L,5UL,0UL,0x0E939A0984C2C580L,0x05B491DCL}, // p_683->g_132
        &p_683->g_124, // p_683->g_139
        0x1BDCF168L, // p_683->g_157
        &p_683->g_2, // p_683->g_193
        &p_683->g_193, // p_683->g_192
        0x13L, // p_683->g_299
        0xBBF1L, // p_683->g_300
        7UL, // p_683->g_313
        0L, // p_683->g_329
        0xF1A5C17C091CF57CL, // p_683->g_330
        (VECTOR(int16_t, 2))(1L, (-8L)), // p_683->g_333
        (VECTOR(int8_t, 2))(0x35L, 0x5CL), // p_683->g_335
        {{{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x2FA7DD2C73BB68F0L,0x3E78EBC6D4E48C22L,0x636FL,0x699AC101L,0xB4D24A3CL,0xC8L,7UL,0x0DACD3C7C2A8DDC2L,0L,0xDF2E8595L},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL},{9UL,0x63458B57201F70B8L,0xC5D5L,-6L,0UL,1UL,0x14C82FBFL,0x7F2927388E632CFFL,-8L,4294967294UL},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL}},{{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x2FA7DD2C73BB68F0L,0x3E78EBC6D4E48C22L,0x636FL,0x699AC101L,0xB4D24A3CL,0xC8L,7UL,0x0DACD3C7C2A8DDC2L,0L,0xDF2E8595L},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL},{9UL,0x63458B57201F70B8L,0xC5D5L,-6L,0UL,1UL,0x14C82FBFL,0x7F2927388E632CFFL,-8L,4294967294UL},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL}},{{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x2FA7DD2C73BB68F0L,0x3E78EBC6D4E48C22L,0x636FL,0x699AC101L,0xB4D24A3CL,0xC8L,7UL,0x0DACD3C7C2A8DDC2L,0L,0xDF2E8595L},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL},{9UL,0x63458B57201F70B8L,0xC5D5L,-6L,0UL,1UL,0x14C82FBFL,0x7F2927388E632CFFL,-8L,4294967294UL},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL}},{{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x2FA7DD2C73BB68F0L,0x3E78EBC6D4E48C22L,0x636FL,0x699AC101L,0xB4D24A3CL,0xC8L,7UL,0x0DACD3C7C2A8DDC2L,0L,0xDF2E8595L},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL},{9UL,0x63458B57201F70B8L,0xC5D5L,-6L,0UL,1UL,0x14C82FBFL,0x7F2927388E632CFFL,-8L,4294967294UL},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL}},{{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x2FA7DD2C73BB68F0L,0x3E78EBC6D4E48C22L,0x636FL,0x699AC101L,0xB4D24A3CL,0xC8L,7UL,0x0DACD3C7C2A8DDC2L,0L,0xDF2E8595L},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL},{9UL,0x63458B57201F70B8L,0xC5D5L,-6L,0UL,1UL,0x14C82FBFL,0x7F2927388E632CFFL,-8L,4294967294UL},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL}},{{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x9CCD04E46CC1EDEBL,0x04DC9B6320923F44L,0x6D35L,0x13D66BECL,0x12A10FA9L,0xD5L,7UL,0x4026DE08464344B8L,-2L,1UL},{0x2FA7DD2C73BB68F0L,0x3E78EBC6D4E48C22L,0x636FL,0x699AC101L,0xB4D24A3CL,0xC8L,7UL,0x0DACD3C7C2A8DDC2L,0L,0xDF2E8595L},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL},{9UL,0x63458B57201F70B8L,0xC5D5L,-6L,0UL,1UL,0x14C82FBFL,0x7F2927388E632CFFL,-8L,4294967294UL},{0x5BB740180F1C2DAAL,0xE85D8EFB73BEA6F1L,65534UL,5L,4294967287UL,0xA8L,0x26D010A0L,-3L,-7L,0xF981A2ECL}}}, // p_683->g_349
        {{&p_683->g_121[0][7],&p_683->g_121[2][1],&p_683->g_121[0][7],&p_683->g_121[0][7]},{&p_683->g_121[0][7],&p_683->g_121[2][1],&p_683->g_121[0][7],&p_683->g_121[0][7]},{&p_683->g_121[0][7],&p_683->g_121[2][1],&p_683->g_121[0][7],&p_683->g_121[0][7]},{&p_683->g_121[0][7],&p_683->g_121[2][1],&p_683->g_121[0][7],&p_683->g_121[0][7]},{&p_683->g_121[0][7],&p_683->g_121[2][1],&p_683->g_121[0][7],&p_683->g_121[0][7]},{&p_683->g_121[0][7],&p_683->g_121[2][1],&p_683->g_121[0][7],&p_683->g_121[0][7]},{&p_683->g_121[0][7],&p_683->g_121[2][1],&p_683->g_121[0][7],&p_683->g_121[0][7]}}, // p_683->g_355
        1UL, // p_683->g_365
        (void*)0, // p_683->g_370
        {{4294967295UL,6L,65533UL,0x30L,18446744073709551615UL,0x1A0AAF90L},{4294967293UL,0x1FE122D3L,9UL,255UL,5UL,0x2FAA639AL},{4294967288UL,-6L,0x61E2L,0xC9L,0x0B257B3A8BC680BEL,-1L},{4294967293UL,0x1FE122D3L,9UL,255UL,5UL,0x2FAA639AL},{4294967295UL,6L,65533UL,0x30L,18446744073709551615UL,0x1A0AAF90L},{4294967295UL,6L,65533UL,0x30L,18446744073709551615UL,0x1A0AAF90L},{4294967293UL,0x1FE122D3L,9UL,255UL,5UL,0x2FAA639AL},{4294967288UL,-6L,0x61E2L,0xC9L,0x0B257B3A8BC680BEL,-1L},{4294967293UL,0x1FE122D3L,9UL,255UL,5UL,0x2FAA639AL},{4294967295UL,6L,65533UL,0x30L,18446744073709551615UL,0x1A0AAF90L}}, // p_683->g_371
        {{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L},{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L},{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L},{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L},{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L},{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L},{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L},{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L},{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L},{0UL,9L,9UL,0xC0L,3UL,0x4C08B441L}}, // p_683->g_396
        &p_683->g_157, // p_683->g_406
        (void*)0, // p_683->g_469
        &p_683->g_469, // p_683->g_468
        &p_683->g_468, // p_683->g_467
        &p_683->g_193, // p_683->g_510
        (VECTOR(uint8_t, 2))(0xE4L, 0x2DL), // p_683->g_513
        (VECTOR(int8_t, 2))(0x3CL, 6L), // p_683->g_526
        0UL, // p_683->g_529
        (VECTOR(int32_t, 8))(0L, (VECTOR(int32_t, 4))(0L, (VECTOR(int32_t, 2))(0L, 0x645ED80DL), 0x645ED80DL), 0x645ED80DL, 0L, 0x645ED80DL), // p_683->g_534
        (VECTOR(int16_t, 16))(0L, (VECTOR(int16_t, 4))(0L, (VECTOR(int16_t, 2))(0L, 7L), 7L), 7L, 0L, 7L, (VECTOR(int16_t, 2))(0L, 7L), (VECTOR(int16_t, 2))(0L, 7L), 0L, 7L, 0L, 7L), // p_683->g_546
        (VECTOR(uint32_t, 8))(0UL, (VECTOR(uint32_t, 4))(0UL, (VECTOR(uint32_t, 2))(0UL, 1UL), 1UL), 1UL, 0UL, 1UL), // p_683->g_559
        {{4294967292UL,0x6B7D7E97L,0xF98DL,0x97L,0x7DD719E945FFAE83L,0x68E8BF6EL},{4294967292UL,0x6B7D7E97L,0xF98DL,0x97L,0x7DD719E945FFAE83L,0x68E8BF6EL},{4294967292UL,0x6B7D7E97L,0xF98DL,0x97L,0x7DD719E945FFAE83L,0x68E8BF6EL},{4294967292UL,0x6B7D7E97L,0xF98DL,0x97L,0x7DD719E945FFAE83L,0x68E8BF6EL}}, // p_683->g_585
        {1UL,9UL,65535UL,-1L,1UL,0xCCL,0xC69D7B4CL,0L,0x6545471CL,0x5C365D5FL}, // p_683->g_598
        {0xBA515346C2CBFE32L,0x858888F9299D453CL,0x4CA1L,0x07B2514DL,1UL,0x63L,0x7C65C949L,0x748B2BCB495AFF40L,0L,8UL}, // p_683->g_613
        {1UL,1UL,0UL,0x461A0F43L,4294967286UL,255UL,0x04D4A772L,0L,0x31653123L,0x4ADF5234L}, // p_683->g_626
        {3UL,18446744073709551612UL,65535UL,-1L,4294967295UL,0xE3L,1UL,-7L,1L,0x7B2BF584L}, // p_683->g_627
        {6UL,0x4650F813814CB815L,0xBE40L,0x49C3349FL,4294967286UL,0xE9L,4294967295UL,0x3A23C2C77CC51DB5L,3L,0UL}, // p_683->g_630
        {{0xE9930A3E2AFF7CD1L,0xF900D4C5047F358AL,0UL,0x45E6FE4FL,4294967295UL,0x8CL,0UL,1L,0x438DE87DL,2UL}}, // p_683->g_631
        (VECTOR(int32_t, 4))((-4L), (VECTOR(int32_t, 2))((-4L), 0x4ADBA749L), 0x4ADBA749L), // p_683->g_639
        (void*)0, // p_683->g_647
        {18446744073709551606UL,0x4892FB0628137027L,9UL,0x72EE13D9L,0UL,1UL,0xA0197633L,0x354E3311320017A0L,0x2CC27B5DL,0x135F8A11L}, // p_683->g_650
        {0x48CE211382A5750DL,1UL,3UL,0x33EC3A1FL,4294967286UL,255UL,1UL,0x71712B66035DE8A4L,0x64732835L,4294967286UL}, // p_683->g_651
        {18446744073709551615UL,18446744073709551615UL,65527UL,0x66A2DB30L,0xBA1C8222L,1UL,0x7D05DC90L,-10L,0x141F464EL,4294967295UL}, // p_683->g_652
        {3L,3L,3L,3L,3L,3L}, // p_683->g_653
        (VECTOR(int32_t, 8))(0x086362ACL, (VECTOR(int32_t, 4))(0x086362ACL, (VECTOR(int32_t, 2))(0x086362ACL, 0x397A1D88L), 0x397A1D88L), 0x397A1D88L, 0x086362ACL, 0x397A1D88L), // p_683->g_657
        (VECTOR(uint16_t, 16))(0xB334L, (VECTOR(uint16_t, 4))(0xB334L, (VECTOR(uint16_t, 2))(0xB334L, 1UL), 1UL), 1UL, 0xB334L, 1UL, (VECTOR(uint16_t, 2))(0xB334L, 1UL), (VECTOR(uint16_t, 2))(0xB334L, 1UL), 0xB334L, 1UL, 0xB334L, 1UL), // p_683->g_675
        (VECTOR(uint32_t, 8))(4UL, (VECTOR(uint32_t, 4))(4UL, (VECTOR(uint32_t, 2))(4UL, 0xEA7AF4AEL), 0xEA7AF4AEL), 0xEA7AF4AEL, 4UL, 0xEA7AF4AEL), // p_683->g_678
        0, // p_683->v_collective
        sequence_input[get_global_id(0)], // p_683->global_0_offset
        sequence_input[get_global_id(1)], // p_683->global_1_offset
        sequence_input[get_global_id(2)], // p_683->global_2_offset
        sequence_input[get_local_id(0)], // p_683->local_0_offset
        sequence_input[get_local_id(1)], // p_683->local_1_offset
        sequence_input[get_local_id(2)], // p_683->local_2_offset
        sequence_input[get_group_id(0)], // p_683->group_0_offset
        sequence_input[get_group_id(1)], // p_683->group_1_offset
        sequence_input[get_group_id(2)], // p_683->group_2_offset
        (safe_add_func_uint32_t_u_u((safe_mul_func_uint32_t_u_u(get_linear_group_id(), 215)), permutations[0][get_linear_local_id()])), // p_683->tid
        g_atomic_input, // g_atomic_input
        g_special_values, // g_special_values
        l_atomic_reduction, // l_atomic_reduction
        g_atomic_reduction, // g_atomic_reduction
        l_comm_values, // l_comm_values
        g_comm_values, // g_comm_values
    };
    c_684 = c_685;
    barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
    func_1(p_683);
    barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
    uint64_t crc64_context = 0xFFFFFFFFFFFFFFFFUL;
    int print_hash_value = 0;
    transparent_crc(p_683->g_2, "p_683->g_2", print_hash_value);
    transparent_crc(p_683->g_18.x, "p_683->g_18.x", print_hash_value);
    transparent_crc(p_683->g_18.y, "p_683->g_18.y", print_hash_value);
    transparent_crc(p_683->g_18.z, "p_683->g_18.z", print_hash_value);
    transparent_crc(p_683->g_18.w, "p_683->g_18.w", print_hash_value);
    transparent_crc(p_683->g_30, "p_683->g_30", print_hash_value);
    transparent_crc(p_683->g_38.s0, "p_683->g_38.s0", print_hash_value);
    transparent_crc(p_683->g_38.s1, "p_683->g_38.s1", print_hash_value);
    transparent_crc(p_683->g_38.s2, "p_683->g_38.s2", print_hash_value);
    transparent_crc(p_683->g_38.s3, "p_683->g_38.s3", print_hash_value);
    transparent_crc(p_683->g_38.s4, "p_683->g_38.s4", print_hash_value);
    transparent_crc(p_683->g_38.s5, "p_683->g_38.s5", print_hash_value);
    transparent_crc(p_683->g_38.s6, "p_683->g_38.s6", print_hash_value);
    transparent_crc(p_683->g_38.s7, "p_683->g_38.s7", print_hash_value);
    transparent_crc(p_683->g_38.s8, "p_683->g_38.s8", print_hash_value);
    transparent_crc(p_683->g_38.s9, "p_683->g_38.s9", print_hash_value);
    transparent_crc(p_683->g_38.sa, "p_683->g_38.sa", print_hash_value);
    transparent_crc(p_683->g_38.sb, "p_683->g_38.sb", print_hash_value);
    transparent_crc(p_683->g_38.sc, "p_683->g_38.sc", print_hash_value);
    transparent_crc(p_683->g_38.sd, "p_683->g_38.sd", print_hash_value);
    transparent_crc(p_683->g_38.se, "p_683->g_38.se", print_hash_value);
    transparent_crc(p_683->g_38.sf, "p_683->g_38.sf", print_hash_value);
    transparent_crc(p_683->g_50, "p_683->g_50", print_hash_value);
    transparent_crc(p_683->g_57.f0, "p_683->g_57.f0", print_hash_value);
    transparent_crc(p_683->g_57.f1, "p_683->g_57.f1", print_hash_value);
    transparent_crc(p_683->g_57.f2, "p_683->g_57.f2", print_hash_value);
    transparent_crc(p_683->g_57.f3, "p_683->g_57.f3", print_hash_value);
    transparent_crc(p_683->g_57.f4, "p_683->g_57.f4", print_hash_value);
    transparent_crc(p_683->g_57.f5, "p_683->g_57.f5", print_hash_value);
    transparent_crc(p_683->g_57.f6, "p_683->g_57.f6", print_hash_value);
    transparent_crc(p_683->g_57.f7, "p_683->g_57.f7", print_hash_value);
    transparent_crc(p_683->g_57.f8, "p_683->g_57.f8", print_hash_value);
    transparent_crc(p_683->g_57.f9, "p_683->g_57.f9", print_hash_value);
    transparent_crc(p_683->g_82, "p_683->g_82", print_hash_value);
    transparent_crc(p_683->g_91, "p_683->g_91", print_hash_value);
    transparent_crc(p_683->g_99, "p_683->g_99", print_hash_value);
    transparent_crc(p_683->g_108.f0, "p_683->g_108.f0", print_hash_value);
    transparent_crc(p_683->g_108.f1, "p_683->g_108.f1", print_hash_value);
    transparent_crc(p_683->g_108.f2, "p_683->g_108.f2", print_hash_value);
    transparent_crc(p_683->g_108.f3, "p_683->g_108.f3", print_hash_value);
    transparent_crc(p_683->g_108.f4, "p_683->g_108.f4", print_hash_value);
    transparent_crc(p_683->g_108.f5, "p_683->g_108.f5", print_hash_value);
    for (i = 0; i < 2; i++)
    {
        transparent_crc(p_683->g_118[i], "p_683->g_118[i]", print_hash_value);

    }
    transparent_crc(p_683->g_122.f0, "p_683->g_122.f0", print_hash_value);
    transparent_crc(p_683->g_122.f1, "p_683->g_122.f1", print_hash_value);
    transparent_crc(p_683->g_122.f2, "p_683->g_122.f2", print_hash_value);
    transparent_crc(p_683->g_122.f3, "p_683->g_122.f3", print_hash_value);
    transparent_crc(p_683->g_122.f4, "p_683->g_122.f4", print_hash_value);
    transparent_crc(p_683->g_122.f5, "p_683->g_122.f5", print_hash_value);
    transparent_crc(p_683->g_122.f6, "p_683->g_122.f6", print_hash_value);
    transparent_crc(p_683->g_122.f7, "p_683->g_122.f7", print_hash_value);
    transparent_crc(p_683->g_122.f8, "p_683->g_122.f8", print_hash_value);
    transparent_crc(p_683->g_122.f9, "p_683->g_122.f9", print_hash_value);
    for (i = 0; i < 9; i++)
    {
        transparent_crc(p_683->g_123[i].f0, "p_683->g_123[i].f0", print_hash_value);
        transparent_crc(p_683->g_123[i].f1, "p_683->g_123[i].f1", print_hash_value);
        transparent_crc(p_683->g_123[i].f2, "p_683->g_123[i].f2", print_hash_value);
        transparent_crc(p_683->g_123[i].f3, "p_683->g_123[i].f3", print_hash_value);
        transparent_crc(p_683->g_123[i].f4, "p_683->g_123[i].f4", print_hash_value);
        transparent_crc(p_683->g_123[i].f5, "p_683->g_123[i].f5", print_hash_value);
        transparent_crc(p_683->g_123[i].f6, "p_683->g_123[i].f6", print_hash_value);
        transparent_crc(p_683->g_123[i].f7, "p_683->g_123[i].f7", print_hash_value);
        transparent_crc(p_683->g_123[i].f8, "p_683->g_123[i].f8", print_hash_value);
        transparent_crc(p_683->g_123[i].f9, "p_683->g_123[i].f9", print_hash_value);

    }
    transparent_crc(p_683->g_124.f0, "p_683->g_124.f0", print_hash_value);
    transparent_crc(p_683->g_124.f1, "p_683->g_124.f1", print_hash_value);
    transparent_crc(p_683->g_124.f2, "p_683->g_124.f2", print_hash_value);
    transparent_crc(p_683->g_124.f3, "p_683->g_124.f3", print_hash_value);
    transparent_crc(p_683->g_124.f4, "p_683->g_124.f4", print_hash_value);
    transparent_crc(p_683->g_124.f5, "p_683->g_124.f5", print_hash_value);
    transparent_crc(p_683->g_124.f6, "p_683->g_124.f6", print_hash_value);
    transparent_crc(p_683->g_124.f7, "p_683->g_124.f7", print_hash_value);
    transparent_crc(p_683->g_124.f8, "p_683->g_124.f8", print_hash_value);
    transparent_crc(p_683->g_124.f9, "p_683->g_124.f9", print_hash_value);
    transparent_crc(p_683->g_125.f0, "p_683->g_125.f0", print_hash_value);
    transparent_crc(p_683->g_125.f1, "p_683->g_125.f1", print_hash_value);
    transparent_crc(p_683->g_125.f2, "p_683->g_125.f2", print_hash_value);
    transparent_crc(p_683->g_125.f3, "p_683->g_125.f3", print_hash_value);
    transparent_crc(p_683->g_125.f4, "p_683->g_125.f4", print_hash_value);
    transparent_crc(p_683->g_125.f5, "p_683->g_125.f5", print_hash_value);
    transparent_crc(p_683->g_125.f6, "p_683->g_125.f6", print_hash_value);
    transparent_crc(p_683->g_125.f7, "p_683->g_125.f7", print_hash_value);
    transparent_crc(p_683->g_125.f8, "p_683->g_125.f8", print_hash_value);
    transparent_crc(p_683->g_125.f9, "p_683->g_125.f9", print_hash_value);
    for (i = 0; i < 8; i++)
    {
        for (j = 0; j < 4; j++)
        {
            transparent_crc(p_683->g_126[i][j].f0, "p_683->g_126[i][j].f0", print_hash_value);
            transparent_crc(p_683->g_126[i][j].f1, "p_683->g_126[i][j].f1", print_hash_value);
            transparent_crc(p_683->g_126[i][j].f2, "p_683->g_126[i][j].f2", print_hash_value);
            transparent_crc(p_683->g_126[i][j].f3, "p_683->g_126[i][j].f3", print_hash_value);
            transparent_crc(p_683->g_126[i][j].f4, "p_683->g_126[i][j].f4", print_hash_value);
            transparent_crc(p_683->g_126[i][j].f5, "p_683->g_126[i][j].f5", print_hash_value);
            transparent_crc(p_683->g_126[i][j].f6, "p_683->g_126[i][j].f6", print_hash_value);
            transparent_crc(p_683->g_126[i][j].f7, "p_683->g_126[i][j].f7", print_hash_value);
            transparent_crc(p_683->g_126[i][j].f8, "p_683->g_126[i][j].f8", print_hash_value);
            transparent_crc(p_683->g_126[i][j].f9, "p_683->g_126[i][j].f9", print_hash_value);

        }
    }
    transparent_crc(p_683->g_127.f0, "p_683->g_127.f0", print_hash_value);
    transparent_crc(p_683->g_127.f1, "p_683->g_127.f1", print_hash_value);
    transparent_crc(p_683->g_127.f2, "p_683->g_127.f2", print_hash_value);
    transparent_crc(p_683->g_127.f3, "p_683->g_127.f3", print_hash_value);
    transparent_crc(p_683->g_127.f4, "p_683->g_127.f4", print_hash_value);
    transparent_crc(p_683->g_127.f5, "p_683->g_127.f5", print_hash_value);
    transparent_crc(p_683->g_127.f6, "p_683->g_127.f6", print_hash_value);
    transparent_crc(p_683->g_127.f7, "p_683->g_127.f7", print_hash_value);
    transparent_crc(p_683->g_127.f8, "p_683->g_127.f8", print_hash_value);
    transparent_crc(p_683->g_127.f9, "p_683->g_127.f9", print_hash_value);
    for (i = 0; i < 5; i++)
    {
        for (j = 0; j < 2; j++)
        {
            transparent_crc(p_683->g_129[i][j].f0, "p_683->g_129[i][j].f0", print_hash_value);
            transparent_crc(p_683->g_129[i][j].f1, "p_683->g_129[i][j].f1", print_hash_value);
            transparent_crc(p_683->g_129[i][j].f2, "p_683->g_129[i][j].f2", print_hash_value);
            transparent_crc(p_683->g_129[i][j].f3, "p_683->g_129[i][j].f3", print_hash_value);
            transparent_crc(p_683->g_129[i][j].f4, "p_683->g_129[i][j].f4", print_hash_value);
            transparent_crc(p_683->g_129[i][j].f5, "p_683->g_129[i][j].f5", print_hash_value);
            transparent_crc(p_683->g_129[i][j].f6, "p_683->g_129[i][j].f6", print_hash_value);
            transparent_crc(p_683->g_129[i][j].f7, "p_683->g_129[i][j].f7", print_hash_value);
            transparent_crc(p_683->g_129[i][j].f8, "p_683->g_129[i][j].f8", print_hash_value);
            transparent_crc(p_683->g_129[i][j].f9, "p_683->g_129[i][j].f9", print_hash_value);

        }
    }
    transparent_crc(p_683->g_131.f0, "p_683->g_131.f0", print_hash_value);
    transparent_crc(p_683->g_131.f1, "p_683->g_131.f1", print_hash_value);
    transparent_crc(p_683->g_131.f2, "p_683->g_131.f2", print_hash_value);
    transparent_crc(p_683->g_131.f3, "p_683->g_131.f3", print_hash_value);
    transparent_crc(p_683->g_131.f4, "p_683->g_131.f4", print_hash_value);
    transparent_crc(p_683->g_131.f5, "p_683->g_131.f5", print_hash_value);
    transparent_crc(p_683->g_132.f0, "p_683->g_132.f0", print_hash_value);
    transparent_crc(p_683->g_132.f1, "p_683->g_132.f1", print_hash_value);
    transparent_crc(p_683->g_132.f2, "p_683->g_132.f2", print_hash_value);
    transparent_crc(p_683->g_132.f3, "p_683->g_132.f3", print_hash_value);
    transparent_crc(p_683->g_132.f4, "p_683->g_132.f4", print_hash_value);
    transparent_crc(p_683->g_132.f5, "p_683->g_132.f5", print_hash_value);
    transparent_crc(p_683->g_157, "p_683->g_157", print_hash_value);
    transparent_crc(p_683->g_299, "p_683->g_299", print_hash_value);
    transparent_crc(p_683->g_300, "p_683->g_300", print_hash_value);
    transparent_crc(p_683->g_313, "p_683->g_313", print_hash_value);
    transparent_crc(p_683->g_329, "p_683->g_329", print_hash_value);
    transparent_crc(p_683->g_330, "p_683->g_330", print_hash_value);
    transparent_crc(p_683->g_333.x, "p_683->g_333.x", print_hash_value);
    transparent_crc(p_683->g_333.y, "p_683->g_333.y", print_hash_value);
    transparent_crc(p_683->g_335.x, "p_683->g_335.x", print_hash_value);
    transparent_crc(p_683->g_335.y, "p_683->g_335.y", print_hash_value);
    for (i = 0; i < 6; i++)
    {
        for (j = 0; j < 6; j++)
        {
            transparent_crc(p_683->g_349[i][j].f0, "p_683->g_349[i][j].f0", print_hash_value);
            transparent_crc(p_683->g_349[i][j].f1, "p_683->g_349[i][j].f1", print_hash_value);
            transparent_crc(p_683->g_349[i][j].f2, "p_683->g_349[i][j].f2", print_hash_value);
            transparent_crc(p_683->g_349[i][j].f3, "p_683->g_349[i][j].f3", print_hash_value);
            transparent_crc(p_683->g_349[i][j].f4, "p_683->g_349[i][j].f4", print_hash_value);
            transparent_crc(p_683->g_349[i][j].f5, "p_683->g_349[i][j].f5", print_hash_value);
            transparent_crc(p_683->g_349[i][j].f6, "p_683->g_349[i][j].f6", print_hash_value);
            transparent_crc(p_683->g_349[i][j].f7, "p_683->g_349[i][j].f7", print_hash_value);
            transparent_crc(p_683->g_349[i][j].f8, "p_683->g_349[i][j].f8", print_hash_value);
            transparent_crc(p_683->g_349[i][j].f9, "p_683->g_349[i][j].f9", print_hash_value);

        }
    }
    transparent_crc(p_683->g_365, "p_683->g_365", print_hash_value);
    for (i = 0; i < 10; i++)
    {
        transparent_crc(p_683->g_371[i].f0, "p_683->g_371[i].f0", print_hash_value);
        transparent_crc(p_683->g_371[i].f1, "p_683->g_371[i].f1", print_hash_value);
        transparent_crc(p_683->g_371[i].f2, "p_683->g_371[i].f2", print_hash_value);
        transparent_crc(p_683->g_371[i].f3, "p_683->g_371[i].f3", print_hash_value);
        transparent_crc(p_683->g_371[i].f4, "p_683->g_371[i].f4", print_hash_value);
        transparent_crc(p_683->g_371[i].f5, "p_683->g_371[i].f5", print_hash_value);

    }
    for (i = 0; i < 10; i++)
    {
        transparent_crc(p_683->g_396[i].f0, "p_683->g_396[i].f0", print_hash_value);
        transparent_crc(p_683->g_396[i].f1, "p_683->g_396[i].f1", print_hash_value);
        transparent_crc(p_683->g_396[i].f2, "p_683->g_396[i].f2", print_hash_value);
        transparent_crc(p_683->g_396[i].f3, "p_683->g_396[i].f3", print_hash_value);
        transparent_crc(p_683->g_396[i].f4, "p_683->g_396[i].f4", print_hash_value);
        transparent_crc(p_683->g_396[i].f5, "p_683->g_396[i].f5", print_hash_value);

    }
    transparent_crc(p_683->g_513.x, "p_683->g_513.x", print_hash_value);
    transparent_crc(p_683->g_513.y, "p_683->g_513.y", print_hash_value);
    transparent_crc(p_683->g_526.x, "p_683->g_526.x", print_hash_value);
    transparent_crc(p_683->g_526.y, "p_683->g_526.y", print_hash_value);
    transparent_crc(p_683->g_529, "p_683->g_529", print_hash_value);
    transparent_crc(p_683->g_534.s0, "p_683->g_534.s0", print_hash_value);
    transparent_crc(p_683->g_534.s1, "p_683->g_534.s1", print_hash_value);
    transparent_crc(p_683->g_534.s2, "p_683->g_534.s2", print_hash_value);
    transparent_crc(p_683->g_534.s3, "p_683->g_534.s3", print_hash_value);
    transparent_crc(p_683->g_534.s4, "p_683->g_534.s4", print_hash_value);
    transparent_crc(p_683->g_534.s5, "p_683->g_534.s5", print_hash_value);
    transparent_crc(p_683->g_534.s6, "p_683->g_534.s6", print_hash_value);
    transparent_crc(p_683->g_534.s7, "p_683->g_534.s7", print_hash_value);
    transparent_crc(p_683->g_546.s0, "p_683->g_546.s0", print_hash_value);
    transparent_crc(p_683->g_546.s1, "p_683->g_546.s1", print_hash_value);
    transparent_crc(p_683->g_546.s2, "p_683->g_546.s2", print_hash_value);
    transparent_crc(p_683->g_546.s3, "p_683->g_546.s3", print_hash_value);
    transparent_crc(p_683->g_546.s4, "p_683->g_546.s4", print_hash_value);
    transparent_crc(p_683->g_546.s5, "p_683->g_546.s5", print_hash_value);
    transparent_crc(p_683->g_546.s6, "p_683->g_546.s6", print_hash_value);
    transparent_crc(p_683->g_546.s7, "p_683->g_546.s7", print_hash_value);
    transparent_crc(p_683->g_546.s8, "p_683->g_546.s8", print_hash_value);
    transparent_crc(p_683->g_546.s9, "p_683->g_546.s9", print_hash_value);
    transparent_crc(p_683->g_546.sa, "p_683->g_546.sa", print_hash_value);
    transparent_crc(p_683->g_546.sb, "p_683->g_546.sb", print_hash_value);
    transparent_crc(p_683->g_546.sc, "p_683->g_546.sc", print_hash_value);
    transparent_crc(p_683->g_546.sd, "p_683->g_546.sd", print_hash_value);
    transparent_crc(p_683->g_546.se, "p_683->g_546.se", print_hash_value);
    transparent_crc(p_683->g_546.sf, "p_683->g_546.sf", print_hash_value);
    transparent_crc(p_683->g_559.s0, "p_683->g_559.s0", print_hash_value);
    transparent_crc(p_683->g_559.s1, "p_683->g_559.s1", print_hash_value);
    transparent_crc(p_683->g_559.s2, "p_683->g_559.s2", print_hash_value);
    transparent_crc(p_683->g_559.s3, "p_683->g_559.s3", print_hash_value);
    transparent_crc(p_683->g_559.s4, "p_683->g_559.s4", print_hash_value);
    transparent_crc(p_683->g_559.s5, "p_683->g_559.s5", print_hash_value);
    transparent_crc(p_683->g_559.s6, "p_683->g_559.s6", print_hash_value);
    transparent_crc(p_683->g_559.s7, "p_683->g_559.s7", print_hash_value);
    for (i = 0; i < 4; i++)
    {
        transparent_crc(p_683->g_585[i].f0, "p_683->g_585[i].f0", print_hash_value);
        transparent_crc(p_683->g_585[i].f1, "p_683->g_585[i].f1", print_hash_value);
        transparent_crc(p_683->g_585[i].f2, "p_683->g_585[i].f2", print_hash_value);
        transparent_crc(p_683->g_585[i].f3, "p_683->g_585[i].f3", print_hash_value);
        transparent_crc(p_683->g_585[i].f4, "p_683->g_585[i].f4", print_hash_value);
        transparent_crc(p_683->g_585[i].f5, "p_683->g_585[i].f5", print_hash_value);

    }
    transparent_crc(p_683->g_598.f0, "p_683->g_598.f0", print_hash_value);
    transparent_crc(p_683->g_598.f1, "p_683->g_598.f1", print_hash_value);
    transparent_crc(p_683->g_598.f2, "p_683->g_598.f2", print_hash_value);
    transparent_crc(p_683->g_598.f3, "p_683->g_598.f3", print_hash_value);
    transparent_crc(p_683->g_598.f4, "p_683->g_598.f4", print_hash_value);
    transparent_crc(p_683->g_598.f5, "p_683->g_598.f5", print_hash_value);
    transparent_crc(p_683->g_598.f6, "p_683->g_598.f6", print_hash_value);
    transparent_crc(p_683->g_598.f7, "p_683->g_598.f7", print_hash_value);
    transparent_crc(p_683->g_598.f8, "p_683->g_598.f8", print_hash_value);
    transparent_crc(p_683->g_598.f9, "p_683->g_598.f9", print_hash_value);
    transparent_crc(p_683->g_613.f0, "p_683->g_613.f0", print_hash_value);
    transparent_crc(p_683->g_613.f1, "p_683->g_613.f1", print_hash_value);
    transparent_crc(p_683->g_613.f2, "p_683->g_613.f2", print_hash_value);
    transparent_crc(p_683->g_613.f3, "p_683->g_613.f3", print_hash_value);
    transparent_crc(p_683->g_613.f4, "p_683->g_613.f4", print_hash_value);
    transparent_crc(p_683->g_613.f5, "p_683->g_613.f5", print_hash_value);
    transparent_crc(p_683->g_613.f6, "p_683->g_613.f6", print_hash_value);
    transparent_crc(p_683->g_613.f7, "p_683->g_613.f7", print_hash_value);
    transparent_crc(p_683->g_613.f8, "p_683->g_613.f8", print_hash_value);
    transparent_crc(p_683->g_613.f9, "p_683->g_613.f9", print_hash_value);
    transparent_crc(p_683->g_626.f0, "p_683->g_626.f0", print_hash_value);
    transparent_crc(p_683->g_626.f1, "p_683->g_626.f1", print_hash_value);
    transparent_crc(p_683->g_626.f2, "p_683->g_626.f2", print_hash_value);
    transparent_crc(p_683->g_626.f3, "p_683->g_626.f3", print_hash_value);
    transparent_crc(p_683->g_626.f4, "p_683->g_626.f4", print_hash_value);
    transparent_crc(p_683->g_626.f5, "p_683->g_626.f5", print_hash_value);
    transparent_crc(p_683->g_626.f6, "p_683->g_626.f6", print_hash_value);
    transparent_crc(p_683->g_626.f7, "p_683->g_626.f7", print_hash_value);
    transparent_crc(p_683->g_626.f8, "p_683->g_626.f8", print_hash_value);
    transparent_crc(p_683->g_626.f9, "p_683->g_626.f9", print_hash_value);
    transparent_crc(p_683->g_627.f0, "p_683->g_627.f0", print_hash_value);
    transparent_crc(p_683->g_627.f1, "p_683->g_627.f1", print_hash_value);
    transparent_crc(p_683->g_627.f2, "p_683->g_627.f2", print_hash_value);
    transparent_crc(p_683->g_627.f3, "p_683->g_627.f3", print_hash_value);
    transparent_crc(p_683->g_627.f4, "p_683->g_627.f4", print_hash_value);
    transparent_crc(p_683->g_627.f5, "p_683->g_627.f5", print_hash_value);
    transparent_crc(p_683->g_627.f6, "p_683->g_627.f6", print_hash_value);
    transparent_crc(p_683->g_627.f7, "p_683->g_627.f7", print_hash_value);
    transparent_crc(p_683->g_627.f8, "p_683->g_627.f8", print_hash_value);
    transparent_crc(p_683->g_627.f9, "p_683->g_627.f9", print_hash_value);
    transparent_crc(p_683->g_630.f0, "p_683->g_630.f0", print_hash_value);
    transparent_crc(p_683->g_630.f1, "p_683->g_630.f1", print_hash_value);
    transparent_crc(p_683->g_630.f2, "p_683->g_630.f2", print_hash_value);
    transparent_crc(p_683->g_630.f3, "p_683->g_630.f3", print_hash_value);
    transparent_crc(p_683->g_630.f4, "p_683->g_630.f4", print_hash_value);
    transparent_crc(p_683->g_630.f5, "p_683->g_630.f5", print_hash_value);
    transparent_crc(p_683->g_630.f6, "p_683->g_630.f6", print_hash_value);
    transparent_crc(p_683->g_630.f7, "p_683->g_630.f7", print_hash_value);
    transparent_crc(p_683->g_630.f8, "p_683->g_630.f8", print_hash_value);
    transparent_crc(p_683->g_630.f9, "p_683->g_630.f9", print_hash_value);
    for (i = 0; i < 1; i++)
    {
        transparent_crc(p_683->g_631[i].f0, "p_683->g_631[i].f0", print_hash_value);
        transparent_crc(p_683->g_631[i].f1, "p_683->g_631[i].f1", print_hash_value);
        transparent_crc(p_683->g_631[i].f2, "p_683->g_631[i].f2", print_hash_value);
        transparent_crc(p_683->g_631[i].f3, "p_683->g_631[i].f3", print_hash_value);
        transparent_crc(p_683->g_631[i].f4, "p_683->g_631[i].f4", print_hash_value);
        transparent_crc(p_683->g_631[i].f5, "p_683->g_631[i].f5", print_hash_value);
        transparent_crc(p_683->g_631[i].f6, "p_683->g_631[i].f6", print_hash_value);
        transparent_crc(p_683->g_631[i].f7, "p_683->g_631[i].f7", print_hash_value);
        transparent_crc(p_683->g_631[i].f8, "p_683->g_631[i].f8", print_hash_value);
        transparent_crc(p_683->g_631[i].f9, "p_683->g_631[i].f9", print_hash_value);

    }
    transparent_crc(p_683->g_639.x, "p_683->g_639.x", print_hash_value);
    transparent_crc(p_683->g_639.y, "p_683->g_639.y", print_hash_value);
    transparent_crc(p_683->g_639.z, "p_683->g_639.z", print_hash_value);
    transparent_crc(p_683->g_639.w, "p_683->g_639.w", print_hash_value);
    transparent_crc(p_683->g_650.f0, "p_683->g_650.f0", print_hash_value);
    transparent_crc(p_683->g_650.f1, "p_683->g_650.f1", print_hash_value);
    transparent_crc(p_683->g_650.f2, "p_683->g_650.f2", print_hash_value);
    transparent_crc(p_683->g_650.f3, "p_683->g_650.f3", print_hash_value);
    transparent_crc(p_683->g_650.f4, "p_683->g_650.f4", print_hash_value);
    transparent_crc(p_683->g_650.f5, "p_683->g_650.f5", print_hash_value);
    transparent_crc(p_683->g_650.f6, "p_683->g_650.f6", print_hash_value);
    transparent_crc(p_683->g_650.f7, "p_683->g_650.f7", print_hash_value);
    transparent_crc(p_683->g_650.f8, "p_683->g_650.f8", print_hash_value);
    transparent_crc(p_683->g_650.f9, "p_683->g_650.f9", print_hash_value);
    transparent_crc(p_683->g_651.f0, "p_683->g_651.f0", print_hash_value);
    transparent_crc(p_683->g_651.f1, "p_683->g_651.f1", print_hash_value);
    transparent_crc(p_683->g_651.f2, "p_683->g_651.f2", print_hash_value);
    transparent_crc(p_683->g_651.f3, "p_683->g_651.f3", print_hash_value);
    transparent_crc(p_683->g_651.f4, "p_683->g_651.f4", print_hash_value);
    transparent_crc(p_683->g_651.f5, "p_683->g_651.f5", print_hash_value);
    transparent_crc(p_683->g_651.f6, "p_683->g_651.f6", print_hash_value);
    transparent_crc(p_683->g_651.f7, "p_683->g_651.f7", print_hash_value);
    transparent_crc(p_683->g_651.f8, "p_683->g_651.f8", print_hash_value);
    transparent_crc(p_683->g_651.f9, "p_683->g_651.f9", print_hash_value);
    transparent_crc(p_683->g_652.f0, "p_683->g_652.f0", print_hash_value);
    transparent_crc(p_683->g_652.f1, "p_683->g_652.f1", print_hash_value);
    transparent_crc(p_683->g_652.f2, "p_683->g_652.f2", print_hash_value);
    transparent_crc(p_683->g_652.f3, "p_683->g_652.f3", print_hash_value);
    transparent_crc(p_683->g_652.f4, "p_683->g_652.f4", print_hash_value);
    transparent_crc(p_683->g_652.f5, "p_683->g_652.f5", print_hash_value);
    transparent_crc(p_683->g_652.f6, "p_683->g_652.f6", print_hash_value);
    transparent_crc(p_683->g_652.f7, "p_683->g_652.f7", print_hash_value);
    transparent_crc(p_683->g_652.f8, "p_683->g_652.f8", print_hash_value);
    transparent_crc(p_683->g_652.f9, "p_683->g_652.f9", print_hash_value);
    for (i = 0; i < 6; i++)
    {
        transparent_crc(p_683->g_653[i], "p_683->g_653[i]", print_hash_value);

    }
    transparent_crc(p_683->g_657.s0, "p_683->g_657.s0", print_hash_value);
    transparent_crc(p_683->g_657.s1, "p_683->g_657.s1", print_hash_value);
    transparent_crc(p_683->g_657.s2, "p_683->g_657.s2", print_hash_value);
    transparent_crc(p_683->g_657.s3, "p_683->g_657.s3", print_hash_value);
    transparent_crc(p_683->g_657.s4, "p_683->g_657.s4", print_hash_value);
    transparent_crc(p_683->g_657.s5, "p_683->g_657.s5", print_hash_value);
    transparent_crc(p_683->g_657.s6, "p_683->g_657.s6", print_hash_value);
    transparent_crc(p_683->g_657.s7, "p_683->g_657.s7", print_hash_value);
    transparent_crc(p_683->g_675.s0, "p_683->g_675.s0", print_hash_value);
    transparent_crc(p_683->g_675.s1, "p_683->g_675.s1", print_hash_value);
    transparent_crc(p_683->g_675.s2, "p_683->g_675.s2", print_hash_value);
    transparent_crc(p_683->g_675.s3, "p_683->g_675.s3", print_hash_value);
    transparent_crc(p_683->g_675.s4, "p_683->g_675.s4", print_hash_value);
    transparent_crc(p_683->g_675.s5, "p_683->g_675.s5", print_hash_value);
    transparent_crc(p_683->g_675.s6, "p_683->g_675.s6", print_hash_value);
    transparent_crc(p_683->g_675.s7, "p_683->g_675.s7", print_hash_value);
    transparent_crc(p_683->g_675.s8, "p_683->g_675.s8", print_hash_value);
    transparent_crc(p_683->g_675.s9, "p_683->g_675.s9", print_hash_value);
    transparent_crc(p_683->g_675.sa, "p_683->g_675.sa", print_hash_value);
    transparent_crc(p_683->g_675.sb, "p_683->g_675.sb", print_hash_value);
    transparent_crc(p_683->g_675.sc, "p_683->g_675.sc", print_hash_value);
    transparent_crc(p_683->g_675.sd, "p_683->g_675.sd", print_hash_value);
    transparent_crc(p_683->g_675.se, "p_683->g_675.se", print_hash_value);
    transparent_crc(p_683->g_675.sf, "p_683->g_675.sf", print_hash_value);
    transparent_crc(p_683->g_678.s0, "p_683->g_678.s0", print_hash_value);
    transparent_crc(p_683->g_678.s1, "p_683->g_678.s1", print_hash_value);
    transparent_crc(p_683->g_678.s2, "p_683->g_678.s2", print_hash_value);
    transparent_crc(p_683->g_678.s3, "p_683->g_678.s3", print_hash_value);
    transparent_crc(p_683->g_678.s4, "p_683->g_678.s4", print_hash_value);
    transparent_crc(p_683->g_678.s5, "p_683->g_678.s5", print_hash_value);
    transparent_crc(p_683->g_678.s6, "p_683->g_678.s6", print_hash_value);
    transparent_crc(p_683->g_678.s7, "p_683->g_678.s7", print_hash_value);
    transparent_crc(p_683->v_collective, "p_683->v_collective", print_hash_value);
    barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
    if (!get_linear_global_id())
        for (i = 0 ; i < 89; i++)
            transparent_crc(p_683->g_special_values[i + 89 * get_linear_group_id()], "p_683->g_special_values[i + 89 * get_linear_group_id()]", print_hash_value);
    transparent_crc(p_683->l_comm_values[get_linear_local_id()], "p_683->l_comm_values[get_linear_local_id()]", print_hash_value);
    transparent_crc(p_683->g_comm_values[get_linear_group_id() * 215 + get_linear_local_id()], "p_683->g_comm_values[get_linear_group_id() * 215 + get_linear_local_id()]", print_hash_value);
    result[get_linear_global_id()] = crc64_context ^ 0xFFFFFFFFFFFFFFFFUL;
}

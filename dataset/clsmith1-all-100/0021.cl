// --atomics 14 ---atomic_reductions ---fake_divergence ---inter_thread_comm -g 39,32,8 -l 3,16,4
#define int64_t long
#define uint64_t ulong
#define int_least64_t long
#define uint_least64_t ulong
#define int_fast64_t long
#define uint_fast64_t ulong
#define intmax_t long
#define uintmax_t ulong
#define int32_t int
#define uint32_t uint
#define int16_t short
#define uint16_t ushort
#define int8_t char
#define uint8_t uchar

#define INT64_MIN LONG_MIN
#define INT64_MAX LONG_MAX
#define INT32_MIN INT_MIN
#define INT32_MAX INT_MAX
#define INT16_MIN SHRT_MIN
#define INT16_MAX SHRT_MAX
#define INT8_MIN CHAR_MIN
#define INT8_MAX CHAR_MAX
#define UINT64_MIN ULONG_MIN
#define UINT64_MAX ULONG_MAX
#define UINT32_MIN UINT_MIN
#define UINT32_MAX UINT_MAX
#define UINT16_MIN USHRT_MIN
#define UINT16_MAX USHRT_MAX
#define UINT8_MIN UCHAR_MIN
#define UINT8_MAX UCHAR_MAX

#define transparent_crc(X, Y, Z) transparent_crc_(&crc64_context, X, Y, Z)

#define VECTOR(X , Y) VECTOR_(X, Y)
#define VECTOR_(X, Y) X##Y

#ifndef NO_GROUP_DIVERGENCE
#define GROUP_DIVERGE(x, y) get_group_id(x)
#else
#define GROUP_DIVERGE(x, y) (y)
#endif

#ifndef NO_FAKE_DIVERGENCE
#define FAKE_DIVERGE(x, y, z) (x - y)
#else
#define FAKE_DIVERGE(x, y, z) (z)
#endif

__constant uint32_t permutations[10][192] = {
{177,83,13,186,53,14,80,28,11,169,27,108,119,105,61,99,97,107,21,71,109,93,55,183,25,180,172,7,16,130,3,56,150,92,144,165,174,161,157,34,178,49,137,85,122,129,189,36,70,175,113,75,64,42,65,31,59,141,111,118,125,135,98,176,155,160,43,51,10,91,37,77,18,38,23,114,47,17,146,182,191,62,12,170,73,30,184,74,145,89,26,8,147,126,94,140,69,153,63,185,32,102,188,104,60,78,152,72,67,142,131,84,154,6,45,35,167,143,190,115,1,66,179,44,79,187,139,86,181,24,120,100,33,173,29,40,96,124,116,168,101,149,41,19,163,133,148,20,4,88,54,0,103,39,136,90,171,128,123,87,81,68,162,164,127,138,48,95,76,46,151,5,132,134,82,156,158,9,166,50,58,2,22,121,15,112,159,52,57,117,106,110}, // permutation 0
{158,84,131,68,79,176,87,100,150,21,136,34,154,110,132,101,73,88,160,141,23,42,118,172,128,20,177,129,26,2,35,164,183,32,39,151,74,140,19,30,6,66,7,91,116,57,80,4,148,70,41,145,96,173,135,119,97,29,108,13,16,111,187,181,82,191,85,3,106,117,166,8,189,185,33,113,15,36,14,63,18,93,81,76,102,125,60,121,178,12,10,44,138,89,142,67,31,55,124,107,122,144,104,59,92,180,43,47,69,64,25,155,143,190,188,165,109,1,51,159,171,45,115,71,17,46,167,123,54,179,153,130,105,149,126,50,72,28,75,40,22,127,58,11,137,120,83,103,169,52,163,186,0,175,49,162,90,146,139,53,95,61,152,157,24,134,174,147,56,168,112,182,65,77,78,37,133,170,161,38,98,99,27,5,94,62,156,114,86,48,9,184}, // permutation 1
{182,86,28,144,156,55,83,31,96,64,3,89,33,54,170,37,52,66,108,16,29,79,72,84,107,131,20,190,97,161,40,91,116,78,110,177,10,26,173,70,5,53,99,106,112,184,113,87,148,105,1,139,114,169,122,47,34,168,115,2,77,160,126,98,183,18,109,68,65,157,119,75,60,186,124,178,117,94,127,136,123,104,7,6,41,158,163,191,38,128,51,142,32,62,61,80,46,44,140,147,24,0,92,162,22,138,9,151,43,100,17,175,39,30,181,48,23,57,56,36,81,8,130,121,145,143,85,185,172,12,11,69,176,118,164,88,125,27,135,188,71,111,180,76,4,93,21,67,159,189,45,133,187,42,132,165,167,74,141,15,101,58,134,174,146,120,150,153,59,102,171,155,49,137,19,14,50,152,82,95,13,166,90,73,103,35,129,149,63,25,154,179}, // permutation 2
{30,114,3,118,79,74,138,191,141,63,106,85,52,26,190,170,161,162,102,188,50,130,185,23,32,113,37,146,22,84,148,98,135,87,69,64,19,101,65,124,169,62,73,179,173,42,59,189,122,1,178,126,78,43,88,21,97,139,158,31,175,120,151,0,9,177,86,27,186,54,116,81,129,66,61,34,136,103,134,51,163,28,70,41,140,121,150,60,144,24,180,57,7,44,152,184,100,35,80,167,96,2,14,168,36,109,8,58,49,20,89,132,18,166,176,99,29,82,127,75,159,104,142,12,131,111,53,92,143,133,71,149,46,25,105,11,55,172,93,67,155,95,187,182,47,33,181,68,83,48,157,125,10,171,154,164,76,15,39,6,38,137,112,183,94,72,40,174,156,107,4,13,119,123,90,153,45,17,56,160,117,147,91,108,110,165,5,115,77,16,145,128}, // permutation 3
{165,85,78,94,7,34,55,69,2,5,29,23,4,59,28,24,128,149,45,178,37,131,172,141,159,168,188,44,117,142,31,191,175,30,63,137,171,180,115,143,130,38,136,22,66,138,56,113,182,124,64,161,67,97,65,83,151,139,96,100,158,102,76,98,73,8,121,58,87,155,42,153,88,0,146,105,9,169,163,39,162,107,68,183,164,127,12,99,166,140,53,35,120,129,160,184,95,84,41,170,27,154,179,101,75,40,89,79,43,17,187,190,118,54,49,104,14,134,71,16,60,91,93,156,6,62,185,72,15,189,132,173,48,110,103,80,135,167,25,114,126,150,106,92,86,109,152,186,70,36,122,112,74,123,50,157,10,61,82,133,145,181,20,177,3,51,90,18,176,116,57,147,26,148,119,125,77,81,108,47,32,46,33,11,13,21,174,144,1,111,52,19}, // permutation 4
{12,166,162,159,158,47,173,101,0,144,137,77,174,163,76,115,35,102,99,120,177,9,2,156,119,48,18,51,178,94,41,179,143,75,139,44,14,34,58,170,96,57,190,63,151,122,155,5,39,184,55,83,92,49,26,111,88,116,182,165,113,129,149,164,176,23,121,42,104,172,127,21,1,189,40,152,135,183,82,37,17,97,186,7,59,95,157,180,148,90,185,153,91,29,16,56,145,60,13,140,78,117,15,150,4,147,27,87,171,3,124,141,62,31,50,114,118,69,73,33,136,131,36,146,81,86,108,52,46,112,187,30,68,43,80,133,175,181,98,103,169,85,70,10,191,105,45,61,188,89,130,132,154,25,53,32,54,71,161,134,66,22,123,107,74,67,106,93,109,24,6,125,79,65,110,19,20,28,128,126,84,8,142,64,38,168,100,160,72,11,138,167}, // permutation 5
{69,143,144,45,167,168,21,37,13,89,123,14,64,170,52,75,119,106,136,133,114,2,155,46,1,63,95,83,9,32,66,153,148,181,20,152,117,55,19,115,57,125,103,138,54,145,73,104,146,18,130,65,107,86,17,159,165,158,180,98,94,87,128,33,90,96,120,187,189,151,172,36,163,72,186,15,113,59,142,88,110,58,30,171,183,109,166,111,161,49,129,174,82,162,10,184,92,134,80,188,43,84,176,48,6,60,47,101,53,93,140,28,62,61,127,105,91,70,173,132,112,34,74,102,44,39,0,26,51,79,22,25,190,38,16,116,124,154,169,29,11,185,24,135,78,41,23,42,71,77,150,27,3,121,137,139,76,160,100,68,5,131,97,40,191,141,156,108,179,177,164,31,56,149,118,50,182,175,99,81,8,157,7,126,147,12,4,178,35,85,67,122}, // permutation 6
{131,7,18,124,165,153,136,38,20,126,56,40,36,99,81,148,89,106,160,103,9,156,169,80,110,171,57,115,52,35,95,183,137,189,91,174,3,16,157,15,33,132,104,97,37,154,146,28,2,190,42,123,22,47,176,152,166,159,73,66,78,69,127,105,29,41,88,111,51,135,185,53,162,108,85,60,149,32,46,1,163,30,179,120,170,45,139,79,21,150,65,98,75,178,133,109,144,14,87,4,54,100,13,34,113,25,188,12,43,138,186,134,10,94,173,187,129,119,11,19,77,61,5,96,0,130,8,86,44,161,175,155,71,121,31,191,68,180,6,112,39,26,184,168,102,118,125,181,114,70,17,82,151,93,72,164,64,128,63,50,23,141,92,62,117,116,101,145,140,147,158,83,182,27,67,177,84,59,90,74,122,142,55,48,49,107,24,172,167,76,58,143}, // permutation 7
{186,42,171,60,79,130,28,9,44,16,140,49,183,7,4,24,150,82,147,80,70,175,160,125,40,116,95,94,83,102,115,46,92,15,133,78,56,66,100,64,164,127,91,58,62,96,151,120,184,177,65,139,121,152,169,55,109,48,154,101,148,157,84,59,162,180,0,111,31,167,113,33,117,68,145,29,39,189,38,85,86,18,30,158,61,81,161,43,181,3,110,156,73,11,153,71,129,74,155,22,103,35,188,26,45,187,25,72,149,17,131,124,185,76,105,136,88,57,36,41,128,87,53,166,47,118,6,170,50,98,54,172,168,12,37,34,104,182,191,178,63,1,173,89,142,107,165,51,5,10,67,13,77,27,23,21,174,20,135,108,134,106,119,144,90,69,14,99,159,138,126,141,190,32,19,132,97,75,146,179,114,122,93,8,2,143,137,176,163,52,112,123}, // permutation 8
{74,173,37,128,100,183,9,48,36,113,43,32,62,70,6,98,75,141,186,16,14,169,178,58,20,164,79,163,88,137,147,185,189,7,51,81,47,38,143,125,55,116,85,139,67,115,22,95,150,46,171,87,68,135,142,121,23,91,149,112,105,64,101,136,1,19,118,106,59,131,39,111,21,109,15,10,18,61,99,184,42,191,44,176,122,8,56,162,65,63,53,130,13,134,90,177,132,24,146,35,188,31,54,174,103,180,187,71,69,94,25,93,156,66,154,181,179,168,72,50,89,41,97,166,76,104,34,77,161,73,153,28,27,160,159,5,11,123,17,148,33,57,3,96,78,83,190,60,167,49,114,127,152,30,175,138,4,26,2,145,119,129,170,92,110,144,182,133,157,124,151,155,102,0,52,172,82,117,126,45,29,84,158,12,107,140,40,108,120,86,165,80} // permutation 9
};

// Seed: 21

#include "CLSmith.h"

/* --- Struct/Union Declarations --- */
struct S0 {
   uint32_t  f0;
   int8_t  f1;
   uint32_t  f2;
   volatile uint64_t  f3;
   uint32_t  f4;
};

struct S3 {
    struct S0 g_2;
    uint32_t v_collective;
    uint64_t global_0_offset;
    uint64_t global_1_offset;
    uint64_t global_2_offset;
    uint64_t local_0_offset;
    uint64_t local_1_offset;
    uint64_t local_2_offset;
    uint64_t group_0_offset;
    uint64_t group_1_offset;
    uint64_t group_2_offset;
    uint32_t tid;
    __local volatile uint32_t *l_atomic_reduction;
    __global volatile uint32_t *g_atomic_reduction;
    __local int64_t *l_comm_values;
    __global int64_t *g_comm_values;
};


/* --- FORWARD DECLARATIONS --- */
struct S0  func_1(struct S3 * p_3);


/* --- FUNCTIONS --- */
/* ------------------------------------------ */
/* 
 * reads : p_3->g_2
 * writes:
 */
struct S0  func_1(struct S3 * p_3)
{ /* block id: 4 */
    return p_3->g_2;
}


__kernel void entry(__global ulong *result, __global volatile uint *g_atomic_input, __global volatile uint *g_special_values, __global volatile int *g_atomic_reduction, __global int *sequence_input, __global long *g_comm_values) {
    int i;
    __local volatile uint32_t l_atomic_reduction[1];
    if (get_linear_local_id() == 0)
        for (i = 0; i < 1; i++)
            l_atomic_reduction[i] = 0;
    __local int64_t l_comm_values[192];
    if (get_linear_local_id() == 0)
        for (i = 0; i < 192; i++)
            l_comm_values[i] = 1;
    struct S3 c_4;
    struct S3* p_3 = &c_4;
    struct S3 c_5 = {
        {9UL,0x12L,0xD42CA8CDL,0x2AE7B79F6A715CC4L,0xB1647C2CL}, // p_3->g_2
        0, // p_3->v_collective
        sequence_input[get_global_id(0)], // p_3->global_0_offset
        sequence_input[get_global_id(1)], // p_3->global_1_offset
        sequence_input[get_global_id(2)], // p_3->global_2_offset
        sequence_input[get_local_id(0)], // p_3->local_0_offset
        sequence_input[get_local_id(1)], // p_3->local_1_offset
        sequence_input[get_local_id(2)], // p_3->local_2_offset
        sequence_input[get_group_id(0)], // p_3->group_0_offset
        sequence_input[get_group_id(1)], // p_3->group_1_offset
        sequence_input[get_group_id(2)], // p_3->group_2_offset
        (safe_add_func_uint32_t_u_u((safe_mul_func_uint32_t_u_u(get_linear_group_id(), 192)), permutations[0][get_linear_local_id()])), // p_3->tid
        l_atomic_reduction, // l_atomic_reduction
        g_atomic_reduction, // g_atomic_reduction
        l_comm_values, // l_comm_values
        g_comm_values, // g_comm_values
    };
    c_4 = c_5;
    barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
    func_1(p_3);
    barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
    uint64_t crc64_context = 0xFFFFFFFFFFFFFFFFUL;
    int print_hash_value = 0;
    transparent_crc(p_3->g_2.f0, "p_3->g_2.f0", print_hash_value);
    transparent_crc(p_3->g_2.f1, "p_3->g_2.f1", print_hash_value);
    transparent_crc(p_3->g_2.f2, "p_3->g_2.f2", print_hash_value);
    transparent_crc(p_3->g_2.f3, "p_3->g_2.f3", print_hash_value);
    transparent_crc(p_3->g_2.f4, "p_3->g_2.f4", print_hash_value);
    transparent_crc(p_3->v_collective, "p_3->v_collective", print_hash_value);
    transparent_crc(p_3->l_comm_values[get_linear_local_id()], "p_3->l_comm_values[get_linear_local_id()]", print_hash_value);
    transparent_crc(p_3->g_comm_values[get_linear_group_id() * 192 + get_linear_local_id()], "p_3->g_comm_values[get_linear_group_id() * 192 + get_linear_local_id()]", print_hash_value);
    result[get_linear_global_id()] = crc64_context ^ 0xFFFFFFFFFFFFFFFFUL;
}
